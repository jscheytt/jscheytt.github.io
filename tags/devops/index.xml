<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on Josia's Blog</title><link>https://jscheytt.github.io/tags/devops/</link><description>Recent content in Devops on Josia's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Josia Scheytt</copyright><lastBuildDate>Wed, 01 May 2024 10:26:25 +0200</lastBuildDate><atom:link href="https://jscheytt.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Our GitOps book is available</title><link>https://jscheytt.github.io/p/our-gitops-book-is-available/</link><pubDate>Wed, 01 May 2024 10:26:25 +0200</pubDate><guid>https://jscheytt.github.io/p/our-gitops-book-is-available/</guid><description>&lt;p&gt;We did it:
Our &lt;a class="link" href="https://gitops-book.dev/" target="_blank" rel="noopener"
&gt;full-length book about GitOps in German&lt;/a&gt; is now finally out!
You can order it anywhere in book stores both physical and online.&lt;/p&gt;
&lt;p&gt;In fall 2023, Baris, Johannes, and me started writing this book with a vision for enabling German-speaking software teams to use GitOps so they can ship changes faster and with more confidence.
It is both the first book about GitOps in German, and from our research it seems like it is also by far the longest book &lt;em&gt;in any language&lt;/em&gt; about GitOps (about 350 pages).&lt;/p&gt;
&lt;p&gt;Are we going to translate it to English?
We sure are interested in doing so but we are still discussing how to do it in a consistent and cost-effective way.&lt;/p&gt;</description></item><item><title>Documentation as Scaled Communication</title><link>https://jscheytt.github.io/p/documentation-as-scaled-communication/</link><pubDate>Tue, 24 Oct 2023 08:21:20 +0200</pubDate><guid>https://jscheytt.github.io/p/documentation-as-scaled-communication/</guid><description>&lt;p&gt;Technical documentation is important, but almost no one enjoys writing it.
At least, I have yet to meet anyone who shares my passion for writing docs.
To me, documentation is not just a chore you do to check a compliance box.
In fact, I believe it can even be a rewarding experience.&lt;/p&gt;
&lt;p&gt;I am also convinced that writing documentation is a &lt;em&gt;core skill for Platform Engineers&lt;/em&gt; running any &lt;a class="link" href="https://internaldeveloperplatform.org" target="_blank" rel="noopener"
&gt;Internal Developer Platforms&lt;/a&gt;.
Developer Platforms need a product mindset, and products need documentation so that users can understand usage and discover features.
And I believe that &lt;strong&gt;technical documentation is a means to scale up your communication&lt;/strong&gt;, especially in the platform context.&lt;/p&gt;
&lt;p&gt;Let me explain with an example:
If someone pings me directly and asks about a specific technical problem in using the platform (e.g. &amp;ldquo;How do I restart my application in staging?&amp;rdquo;), I could respond via a video call (most expensive option, but sometimes necessary) or by giving them the necessary steps directly.
As an alternative, I could also take a few extra minutes to write a documentation article (e.g. a runbook) about it and send the person a link to the article.
The next time someone asks about this specific problem, I can &lt;em&gt;save a lot of time&lt;/em&gt; by not writing out the steps in all detail again.
Instead, I can get into the habit of responding to common questions with links to documentation.&lt;/p&gt;
&lt;p&gt;This can not only reduce the time &lt;em&gt;you alone&lt;/em&gt; spend handling requests:
If your documentation platform has a good search functionality, you may eventually be able to &lt;em&gt;teach people to search through the docs&lt;/em&gt; before making requests, saving time for both Platform Engineers and Developers.
If your documentation tools are configured as openly as possible for contributions, you might even get people to &lt;em&gt;actively participate&lt;/em&gt; in improving your articles, perhaps even writing new ones themselves.&lt;/p&gt;
&lt;p&gt;I have witnessed some of these effects firsthand.
Let me name this observation &lt;strong&gt;Documentation as Scaled Communication&lt;/strong&gt; (or DASC, if you feel like using acronyms).
I am sure that this principle applies very broadly, but I want to keep the focus of this post on &lt;em&gt;technical documentation&lt;/em&gt; and on &lt;em&gt;Platform Engineers&lt;/em&gt; because that is my primary background.&lt;/p&gt;
&lt;h2 id="challenges"&gt;Challenges
&lt;/h2&gt;&lt;p&gt;So why is writing docs so &lt;em&gt;hard&lt;/em&gt;?
From my point of view, we have several challenges to address:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to learn &lt;strong&gt;communication&lt;/strong&gt; through practice, review, and feedback.&lt;/li&gt;
&lt;li&gt;We also need to learn &lt;strong&gt;writing&lt;/strong&gt; (again, through practice, review, and feedback).&lt;/li&gt;
&lt;li&gt;Documentation tools need &lt;strong&gt;extremely low friction&lt;/strong&gt; (i.e. very good UX).&lt;/li&gt;
&lt;li&gt;Tools need to be &lt;strong&gt;configured as wide open&lt;/strong&gt; as possible for contributions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="practicing-communication"&gt;Practicing Communication
&lt;/h3&gt;&lt;p&gt;How can you communicate effectively?
Effectiveness is always determined by the goals of your communication.
Let&amp;rsquo;s say we have the following goals for platform engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable developers to be highly productive&lt;/li&gt;
&lt;li&gt;Enable development teams to deploy to production quickly and with confidence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These goals put us in a position where &lt;strong&gt;empathy&lt;/strong&gt; plays a critical role.
I am not talking specifically about &lt;em&gt;technical means&lt;/em&gt; like surveys or specific SLOs.
What I am talking about is a certain &lt;em&gt;attitude&lt;/em&gt; towards the consumers of our services.&lt;/p&gt;
&lt;p&gt;Raw data and measurements are helpful, and they can certainly guide us as we try to learn from incidents or understand certain usage patterns.
But numbers have their limits, and the people who use our services are not distant technical entities, but &lt;em&gt;blood and flesh humans struggling to deploy features and fix bugs&lt;/em&gt;.
Learning to empathize with our users can include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sit down with a user (maybe even in person, if possible) and ask for feedback on how they use the platform.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Asking proactively&lt;/strong&gt; is radically different from waiting for bug tickets and incident reports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Listen actively:
&lt;ul&gt;
&lt;li&gt;First, listen (you may even want to take notes).
Then keep asking questions to find out what the user is &lt;em&gt;really&lt;/em&gt; trying to accomplish.&lt;/li&gt;
&lt;li&gt;Your primary focus should not be to get fodder for your bug tracker.
(Take notes, though, if something comes up that you did not know about.)
Instead, **focus on understanding the user&amp;rsquo;s overall interaction with your services:&lt;/li&gt;
&lt;li&gt;How do they develop and generally work as a team?
What is their workflow like?
Where are they least productive?
Are they using tools outside your platform that could or should be integrated?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;rsquo;t insist on your preferences&lt;/strong&gt;.
The platform is not there for its own sake, but to enable the developers.
&lt;ul&gt;
&lt;li&gt;This is most evident when I answer complaints with &amp;ldquo;But that&amp;rsquo;s not how the system is supposed to be used! Did you even read xyz?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;I struggle with this point a lot.
When you build a platform, you design for certain usage patterns.
But you can never anticipate how those needs might change in the future.
And if those needs change drastically, you may have to refactor your platform to a greater extent (which will cause you a lot of work).&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m not advocating blindly following every user suggestion &amp;mdash; your product owner will have to prioritize things anyway.
I am also not discouraging helping people understand how to use the existing platform effectively.
My point is:
If you scold people for trying to get things done, you will discourage them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few more resources I recommend for learning to communicate effectively as a Platform Engineer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watch this talk about &amp;ldquo;&lt;a class="link" href="https://www.infoq.com/presentations/incidents-investigation" target="_blank" rel="noopener"
&gt;How did it make sense at the time?&lt;/a&gt;&amp;rdquo; (HDIMSATT).
It is focused on incidents but the same reasoning is helpful for learning empathy with your users.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="link" href="https://sre.google/sre-book/operational-overload" target="_blank" rel="noopener"
&gt;SRE Embedding&lt;/a&gt;&lt;/em&gt;:
Sometimes, you can take empathy to a more extreme level by embedding a Platform Engineer into an app dev team for a period of time.
You as a Platform Engineer will put on your SRE hat and work alongside the developer team in their everyday challenges.&lt;/li&gt;
&lt;li&gt;Read about and learn from some of the great models of empathy, such as Jesus of Nazareth (e.g. in the first four books of the New Testament), the God who became human (this allowed Him to empathize more with us, but also us to empathize more with Him).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="practicing-writing"&gt;Practicing Writing
&lt;/h3&gt;&lt;p&gt;Everyone at work communicates all the time.
Working remotely has forced us to do so in more written form than ever before &amp;mdash; and I think this is a good thing overall!
Sure, it&amp;rsquo;s faster to work together in the office, where it&amp;rsquo;s super easy to quickly ask questions and show things, but asynchronous written communication is much more inclusive and promotes transparency.&lt;/p&gt;
&lt;p&gt;There are many ways to improve your written communication (e.g. &lt;a class="link" href="https://nohello.net" target="_blank" rel="noopener"
&gt;don&amp;rsquo;t make people wait&lt;/a&gt;).
Your written communication will always be better the more you &lt;em&gt;empathize&lt;/em&gt; with the other person(s) (see previous point).
Still, you can practice the following skills to improve your writing in chats:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write &lt;strong&gt;complete sentences&lt;/strong&gt; by default.&lt;/li&gt;
&lt;li&gt;Adhere to &lt;strong&gt;basic grammar and syntax&lt;/strong&gt; (just as you would when writing code).
&lt;ul&gt;
&lt;li&gt;You can use AI assistance for this like &lt;a class="link" href="https://www.deepl.com/de/write" target="_blank" rel="noopener"
&gt;DeepL Write&lt;/a&gt;.
(Hint: I refined this blog post using DeepL Write.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write &lt;strong&gt;short and clear sentences&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;If your message gets longer, use bullets and headings to break your message into more readable chunks.&lt;/li&gt;
&lt;li&gt;Familiarize yourself with the &lt;strong&gt;formatting options&lt;/strong&gt; your chat tool offers.
Some tools allow Markdown, for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;In group chats&lt;/em&gt; (i.e. when communicating with several people at once):
&lt;ol&gt;
&lt;li&gt;Avoid using &lt;strong&gt;literal backreferences&lt;/strong&gt; (&amp;ldquo;this thing&amp;rdquo;, &amp;ldquo;that&amp;rdquo;).
Use the &amp;ldquo;reply to&amp;rdquo; feature (or better yet, if available, start a &lt;strong&gt;thread&lt;/strong&gt;) to maintain/restore context.&lt;/li&gt;
&lt;li&gt;Use @-&lt;strong&gt;mentions&lt;/strong&gt; to notify a subset of people in the current chat, if your message does not address everyone.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the spirit of SRE and &lt;a class="link" href="https://www.learningfromincidents.io" target="_blank" rel="noopener"
&gt;Learning From Incidents&lt;/a&gt;, we can also look back at past communications and learn from them.
Feel free to try these steps as an example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search through your chat history, especially group chats where there are a lot of people and a lot of communication.&lt;/li&gt;
&lt;li&gt;Try to find situations where misunderstandings occurred.
Pick a situation and think about the following questions:
&lt;ol&gt;
&lt;li&gt;What were the basic assumptions that the different people involved had?&lt;/li&gt;
&lt;li&gt;To what extent were the different mental models of these people wrong? Why?&lt;/li&gt;
&lt;li&gt;How could the mismatch between mental model and reality have been uncovered earlier?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="low-friction-editing"&gt;Low-Friction Editing
&lt;/h3&gt;&lt;p&gt;Now we turn briefly to the tool side of things:
If you do not make editing pages and creating documents &lt;em&gt;as fast and convenient as possible&lt;/em&gt;, you will frustrate people and lose potential editors.
Those editors could be people on the platform team &lt;em&gt;and&lt;/em&gt; on the development teams!&lt;/p&gt;
&lt;p&gt;I see this as a very limiting factor when trying to choose a documentation tool.
One category of documentation tools I have specifically avoided &lt;em&gt;for internal development platforms&lt;/em&gt; are &lt;em&gt;Static Site Generators (SSGs) fed from a Git repo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let me be clear about this:
I am a huge fan of Git!
&lt;a class="link" href="https://www.linkedin.com/feed/update/urn:li:activity:7120420743795892225" target="_blank" rel="noopener"
&gt;My writing a book about GitOps&lt;/a&gt; should leave no doubt about that.
But even if you have a template where editing any single page is just a click away &lt;em&gt;and&lt;/em&gt; you link directly to a web IDE &lt;em&gt;and&lt;/em&gt; you can enable automerge on the instantly created feature branch, you still have to wait for a green build to pass.
(Allowing commits directly to the default branch would be careless, because it might break the build &amp;mdash; and you will never get around waiting for the build pipeline on the default branch anyway).
And that wait is (I think) still way too long, and makes the barrier to contributing way too high.&lt;/p&gt;
&lt;p&gt;My current preference is Confluence Cloud (Cloud, not self-hosted!), but my experience is very limited.
Please send suggestions!&lt;/p&gt;
&lt;h3 id="a-culture-of-contributing"&gt;A Culture of Contributing
&lt;/h3&gt;&lt;p&gt;Whenever I see organizations talking about &lt;em&gt;approval processes in documentation tools&lt;/em&gt;, I get sad.
Because sure enough, they will get exactly what they asked for:
Documentation that is picture perfect and set in stone &amp;mdash; it cannot be changed unless you explicitly ask for permission.
But at the same time they &lt;strong&gt;lose everything that makes documentation valuable&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation becomes &lt;strong&gt;outdated&lt;/strong&gt; extremly quickly because you cannot live a &lt;em&gt;Culture of Contributing&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt; becomes difficult, and those who maintain it may not always be available.
This will make even users who have permission to edit and manage certain parts of the content to feel reluctant to write shareable documentation instead of directly responding to requests.&lt;/li&gt;
&lt;li&gt;People will &lt;strong&gt;always make direct requests&lt;/strong&gt; because they can get a faster response.
&lt;ul&gt;
&lt;li&gt;They may &lt;em&gt;not always&lt;/em&gt; get it faster because everyone is busy, but by texting a human you at least have a small chance that someone will respond faster than you will find something in the potentially outdated docs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When documentation becomes outdated and permissions are complex to obtain, you end up with &lt;em&gt;shadow documentation&lt;/em&gt; (e.g. in Word documents on shared drives) or (by default and by far the worst) &lt;em&gt;no documentation at all&lt;/em&gt; happens and &lt;strong&gt;valuable knowledge is lost&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have never seen an organization suffer from vandalism or other malicious overuse of documentation tools.
The only organizations I have encountered are those with typical people who are just trying to do their jobs well and are naturally reluctant to write anything down unless they are forced to.&lt;/p&gt;
&lt;p&gt;For this reason, I believe that &lt;strong&gt;documentation tools should be configured with maximum editability&lt;/strong&gt; to encourage a Culture of Contributing.
You may want to disable deletion and only allow archiving to protect content from disappearing accidentally, but otherwise everything should be as &lt;em&gt;welcoming&lt;/em&gt; towards contributions as possible!
Choose a tool that allows versioning / page history so that you can revert to a known good state if any unwanted changes are made.&lt;/p&gt;
&lt;h2 id="documentation-devices-for-platform-engineers"&gt;Documentation Devices for Platform Engineers
&lt;/h2&gt;&lt;p&gt;I have identified a few types of technical documentation that, in my experience, are particularly valuable in the context of Platform Engineering:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Runbooks
&lt;ul&gt;
&lt;li&gt;By giving step-by-step instructions you enable people to perform certain typical actions themselves.
For an example of a very simple runbook, see the list at the end of &lt;a class="link" href="#practicing-writing" &gt;Practicing Writing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If the amount of code snippets in a runbook gets too large, you might consider writing a script, putting it into a Git repo and creating an automated runbook that can be triggered by any user through a manual pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://adr.github.io" target="_blank" rel="noopener"
&gt;Architectural Decision Records&lt;/a&gt; (ADRs)
&lt;ul&gt;
&lt;li&gt;This is in the spirit of HDIMSATT (see &lt;a class="link" href="#practicing-communication" &gt;Practicing Communication&lt;/a&gt;) and allows you to foster collaboration and structured discussion around important technical decisions.&lt;/li&gt;
&lt;li&gt;It allows you to better understand the assumptions and constraints that were in place at the time.
When you return later, you can re-evaluate whether those assumptions still hold true and revisit the decision in light of new constraints.
(Remember to create another ADR for the new decision you take.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://app.diagrams.net" target="_blank" rel="noopener"
&gt;draw.io&lt;/a&gt; or &lt;a class="link" href="https://mermaid.js.org" target="_blank" rel="noopener"
&gt;Mermaid&lt;/a&gt; for diagrams
&lt;ul&gt;
&lt;li&gt;Many documentation tools come with integrations for these.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition, there are also overarching documentation frameworks such as &lt;a class="link" href="https://arc42.org/overview" target="_blank" rel="noopener"
&gt;arc42&lt;/a&gt;.
At &lt;a class="link" href="https://www.mimacom.com" target="_blank" rel="noopener"
&gt;Mimacom&lt;/a&gt;, we have used arc42 in several projects and found the structure very helpful.
To keep the momentum though, don&amp;rsquo;t think too much about which section a single page belongs to; you can always restructure later after writing your current piece of content.
Fortunately, there are &lt;a class="link" href="https://arc42.org/download" target="_blank" rel="noopener"
&gt;downloads available&lt;/a&gt; for Asciidoc, Markdown, LaTeX, and a few other formats.&lt;/p&gt;</description></item><item><title>I Install Washing Machines (My Latest Job Metaphor)</title><link>https://jscheytt.github.io/p/i-install-washing-machines-my-latest-job-metaphor/</link><pubDate>Tue, 04 Oct 2022 14:30:29 +0100</pubDate><guid>https://jscheytt.github.io/p/i-install-washing-machines-my-latest-job-metaphor/</guid><description>&lt;h2 id="so-what-exactly-do-you-do-for-a-living"&gt;So What Exactly Do You Do For A Living?
&lt;/h2&gt;&lt;p&gt;Whenever we meet new people (or good friends, it sometimes doesn&amp;rsquo;t make a big difference 😄), the above question will come up.
My wife (who is a doctor and has understably fewer problems explaining her job) is always excited to get yet another chance to &amp;ldquo;finally understand&amp;rdquo; what it is that I am doing at work as a &lt;strong&gt;Cloud Automation Engineer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That is the fancy title we at &lt;a class="link" href="https://flowable.wd3.myworkdayjobs.com/de-DE/mimacom/details/Cloud-Automation-Engineer--m-f-d-_JR100074?q=cloud%20automation%20engineer" target="_blank" rel="noopener"
&gt;mimacom&lt;/a&gt; give to people working in &lt;em&gt;Site Reliability Engineering&lt;/em&gt; and &lt;em&gt;DevOps Engineering&lt;/em&gt;, and I have grown to really like it because it starts to convey a lot of meaning right away.
Unfortunately, it&amp;rsquo;s also long and not particularly established (yet).&lt;/p&gt;
&lt;p&gt;In this blog post I will explore one analogy that came to my mind recently.
I have not tried it out in the wild yet, but I am fascinated by the similarities between deploying washing machines and deploying web applications.&lt;/p&gt;
&lt;h2 id="my-latest-metaphor"&gt;My Latest Metaphor
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say I work in a company that builds, delivers, and maintains washing machines for laundromats.
The colleagues in my team whom I work most closely with design new washing machine models.
You could say they design or &amp;ldquo;develop&amp;rdquo; the washing machines.&lt;/p&gt;
&lt;p&gt;They do this very frequently — even so frequently, that they tweak the current model mostly on a daily basis.
Whenever they change the model, we want to bring these improvements to our customers as quickly as possible.&lt;/p&gt;
&lt;p&gt;And here begins my responsibility as Laundry Automation Engineer™️.&lt;/p&gt;
&lt;h3 id="delivering-new-washing-machines"&gt;Delivering New Washing Machines
&lt;/h3&gt;&lt;p&gt;There are several steps that now need to happen in succession until the new model lands at our customers (the laundromats).
We also call this a &lt;strong&gt;pipeline&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The designers/developers wrote some simulations to check if the models they produce really work as they should.
I run these simulations on a computer.&lt;/li&gt;
&lt;li&gt;I send the model to the factory to let some construction robots assemble it.&lt;/li&gt;
&lt;li&gt;I take the assembled model, plug it into current and water and run some standard washing programs and test for potential leaks and similar problems.&lt;/li&gt;
&lt;li&gt;I package up the assembled model (together with its necessary accessories) and put it into a van.&lt;/li&gt;
&lt;li&gt;And finally, I drive the new washing machine to the customer, connect the new washing machine, disconnect the old one and dispose of it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But a good Laundry Automation Engineer™️ will normally not do any of these steps above themselves.
Instead, he or she will build robots to do it for them.
Robots are a lot more reliable, faster, and cheaper when it comes to repetitive tasks.&lt;/p&gt;
&lt;p&gt;So, in short:
&lt;strong&gt;I build robots that automate all the above steps.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And if there is an error during any of the above steps, the pipeline for the current model change will stop (so we don&amp;rsquo;t deliver broken machines).
I will then look what caused the error and fix it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s zoom in on a few details around the last step when the robots install the new machines:&lt;/p&gt;
&lt;h3 id="zero-downtime"&gt;Zero-Downtime
&lt;/h3&gt;&lt;p&gt;Our laundromats are very highly frequented, basically around the clock, even on weekends.
People come and go all the time.
They put their clothes into a machine, select a program, pay with coins or by card, set it off running, and return when their laundry is supposed to be ready.&lt;/p&gt;
&lt;p&gt;For simplicity, I will now switch back to me as the one doing the actual work (instead of the robots).
Whenever I install a new washing machine to replace a currently running one, I have to be very careful:
The people running the laundromat want to have as few interruptions as possible so that people can start washing programs all the time.
They know that if they have to many interruptions, potential customers will get annoyed because a queue will form, and if they have to wait for too long they will go elsewhere.&lt;/p&gt;
&lt;p&gt;So normally, I will install the new washing machine first (connect to current and water), mark the old machine as &amp;ldquo;stale&amp;rdquo; (so customers can only get their laundry from it but not start any new programs), then disconnect the old one.
This does introduce a little bit of energy and water overhead for the laundromat, but they happily pay that price.
And good for me that in reality I have robots managing all this for me.&lt;/p&gt;
&lt;h2 id="behind-the-scenes-a-glossary"&gt;Behind The Scenes: A Glossary
&lt;/h2&gt;&lt;dl&gt;
&lt;dt&gt;Washing Machine:&lt;/dt&gt;
&lt;dd&gt;A web application that communicates over HTTP.
It receives requests (dirty laundry and some program parameters) and delivers responses (clean laundry in the happy path).&lt;/dd&gt;
&lt;dt&gt;Laundromat:&lt;/dt&gt;
&lt;dd&gt;A company that makes most of its business value through running web applications and processing data in a value-adding way.&lt;/dd&gt;
&lt;dt&gt;Designer/Developer:&lt;/dt&gt;
&lt;dd&gt;An application developer writing code in a programming language.&lt;/dd&gt;
&lt;dt&gt;Bringing Improvements To The Customer Asap:&lt;/dt&gt;
&lt;dd&gt;We call this Continuous Delivery or Continuous Deployment.&lt;/dd&gt;
&lt;dt&gt;Laundry Automation Engineer:&lt;/dt&gt;
&lt;dd&gt;Just made this up. This would be the Cloud Automation Engineer / DevOps Engineer.&lt;/dd&gt;
&lt;dt&gt;Pipeline:&lt;/dt&gt;
&lt;dd&gt;The above example describes a Continuous Integration pipeline that also deploys at the end.&lt;/dd&gt;
&lt;dt&gt;Pipeline Step 1:&lt;/dt&gt;
&lt;dd&gt;This step could map to linting, unit testing, and static code analysis.&lt;/dd&gt;
&lt;dt&gt;Pipeline Step 2:&lt;/dt&gt;
&lt;dd&gt;This is a &amp;ldquo;build&amp;rdquo; or &amp;ldquo;compile&amp;rdquo; step.&lt;/dd&gt;
&lt;dt&gt;Pipeline Step 3:&lt;/dt&gt;
&lt;dd&gt;This step could map to integration testing, end-to-end-testing, fuzzying, and security testing of sorts.&lt;/dd&gt;
&lt;dt&gt;Pipeline Step 4:&lt;/dt&gt;
&lt;dd&gt;This is a &amp;ldquo;container image build&amp;rdquo; step.&lt;/dd&gt;
&lt;dt&gt;Pipeline Step 5:&lt;/dt&gt;
&lt;dd&gt;This is a &amp;ldquo;deploy&amp;rdquo; or &amp;ldquo;release&amp;rdquo; step.&lt;/dd&gt;
&lt;dt&gt;Robot:&lt;/dt&gt;
&lt;dd&gt;A script with prescribed steps which is executed automatically whenever a new change is published.&lt;/dd&gt;
&lt;dt&gt;Zero-Downtime:&lt;/dt&gt;
&lt;dd&gt;This is just a rough description of how I understand the default &lt;code&gt;Deployment.spec.strategy.type=RollingUpdate&lt;/code&gt;.
I think it&amp;rsquo;s not perfect but still fits good because in both situations you have the (somewhat conflicting) unbroken, continuous streams of requests/people and electricity.&lt;/dd&gt;
&lt;/dl&gt;</description></item><item><title>You can Gitopsify your Ansible</title><link>https://jscheytt.github.io/p/you-can-gitopsify-your-ansible/</link><pubDate>Tue, 01 Mar 2022 08:34:20 +0100</pubDate><guid>https://jscheytt.github.io/p/you-can-gitopsify-your-ansible/</guid><description>&lt;p&gt;I have a &lt;a class="link" href="https://github.com/jscheytt/dotfiles" target="_blank" rel="noopener"
&gt;dotfiles repository&lt;/a&gt; for setting up my MacOS machine easily and reproducibly.
For this I am mostly using Ansible, just slightly wrapping it with Make and seasoning it with a pinch of Shell.&lt;/p&gt;
&lt;p&gt;The core piece of this repository is a &lt;code&gt;Brewfile&lt;/code&gt; and a collection of &lt;a class="link" href="https://github.com/jscheytt/dotfiles/blob/main/files/dotfiles/.oh-my-zsh/custom/aliases.zsh" target="_blank" rel="noopener"
&gt;Shell aliases&lt;/a&gt; and &lt;a class="link" href="https://github.com/jscheytt/dotfiles/blob/main/files/dotfiles/.oh-my-zsh/custom/functions.sh" target="_blank" rel="noopener"
&gt;functions&lt;/a&gt;.
I don&amp;rsquo;t regularly run the Ansible playbook itself because I created it for initially setting up a machine.
The only thing I run very frequently is the &lt;a class="link" href="https://github.com/jscheytt/dotfiles/blob/main/files/dotfiles/.oh-my-zsh/custom/functions.sh#L107" target="_blank" rel="noopener"
&gt;upgrade&lt;/a&gt; command which includes persisting new Brew formulae to the &lt;code&gt;Brewfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the same time I have come to love applying &lt;a class="link" href="https://opengitops.dev/" target="_blank" rel="noopener"
&gt;GitOps principles&lt;/a&gt; to everything I work with.
Just the other day I was &lt;a class="link" href="https://github.com/jscheytt/dotfiles/commit/c4278a0b8bbe1f4875efd56ceffc43459d919d1f" target="_blank" rel="noopener"
&gt;moving some commands&lt;/a&gt; (in the vein of &amp;ldquo;global Git pull&amp;rdquo;) out of said &lt;code&gt;upgrade&lt;/code&gt; command into a cronjob.&lt;/p&gt;
&lt;p&gt;And then it hit me:
If I create a cronjob for running my Ansible playbook &lt;em&gt;through the playbook itself&lt;/em&gt;, I have GitOps-like reconciliation!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do it in just a few lines of yaml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;- &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;Ensure dotfiles are applied&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;Ensure dotfiles are applied&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;9&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;1-5&amp;#34;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c"&gt;# on workdays&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l"&gt;make -f &amp;#34;{{ ansible_env.PWD }}&amp;#34;/Makefile build&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>The Story of My First Makefile — Half-Versioned Secrets Management</title><link>https://jscheytt.github.io/p/the-story-of-my-first-makefile-half-versioned-secrets-management/</link><pubDate>Mon, 06 Sep 2021 13:38:15 +0200</pubDate><guid>https://jscheytt.github.io/p/the-story-of-my-first-makefile-half-versioned-secrets-management/</guid><description>&lt;p&gt;As a DevOps Engineer one key skill is &lt;strong&gt;automating repetitive tasks&lt;/strong&gt;.
What most people grab for intuitively is writing Shell scripts (be it Bash, zsh, fish or whichever flavor you prefer).
And there are a lot many good reasons to do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is closest to typing commands directly in the terminal.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have to learn a dedicated programming language.&lt;/li&gt;
&lt;li&gt;It is very portable to other platforms like e.g. a CI server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But once you start managing an increasing number of tasks with your scripts, you start to face another problem:
How do you &lt;em&gt;manage your scripts&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Personally, I have always loved being able to enter some new place where &lt;strong&gt;conventions&lt;/strong&gt; were already in place.
It takes away so much work and mental effort at the beginning, and you can just get to work quickly.
(That might explain why I fell in love with ❤️ &lt;a class="link" href="https://rubyonrails.org/doctrine/#convention-over-configuration" target="_blank" rel="noopener"
&gt;Ruby on Rails&lt;/a&gt; before I dug into 💎 Ruby.)&lt;/p&gt;
&lt;p&gt;Shell scripts by their very nature do not pose any restrictions regarding e.g. naming patterns or directory structures.
Honestly, I think there never will be, and that is ok.
But what I have come to appreciate a lot recently is &lt;strong&gt;&lt;a class="link" href="https://www.gnu.org/software/make/" target="_blank" rel="noopener"
&gt;Make&lt;/a&gt;&lt;/strong&gt; as a &lt;strong&gt;companion&lt;/strong&gt; for my Shell scripts.&lt;/p&gt;
&lt;h2 id="-make-vs--shell-in-a--nutshell"&gt;🏗 Make vs. 🐚 Shell in a 🥜 Nutshell
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Purpose: Make is good at &lt;strong&gt;creating files&lt;/strong&gt;, Shell is good at &lt;strong&gt;executing scripts&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Portability: If your system has Bash, chances are pretty high that Make is also available.&lt;/li&gt;
&lt;li&gt;Developer API: Make has a &lt;strong&gt;clear entrypoint&lt;/strong&gt; (namely &lt;code&gt;make&lt;/code&gt;), Shell can be everything you want it to be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make is a tool that has its origin in the world of compiled languages, especially C.
Compiling source code into binary artifacts (and doing so 🏎 &lt;em&gt;economically&lt;/em&gt;) is what Make was originally designed for.
I mean, the name of a tool should make its use clear, but let me just state this again for my future self:
Make is meant to 🏗 make (create) files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s all about target files.&lt;/strong&gt;
That&amp;rsquo;s why it makes sense to approach a Makefile with a mindset of &amp;ldquo;What do I want to create/build?&amp;rdquo; instead of &amp;ldquo;What do I want to perform?&amp;rdquo;
To me this sounds very reminiscent of the distinction between &lt;em&gt;declarative and imperative&lt;/em&gt; programming.&lt;/p&gt;
&lt;h2 id="safely-versioned-secrets-management"&gt;Safely Versioned Secrets Management
&lt;/h2&gt;&lt;p&gt;My concrete entrypoint into Make was the following use case I had lately, and it hopefully helps to illustrate the point of target files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☸️ You have 2 AWS accounts with 1 &lt;strong&gt;Kubernetes&lt;/strong&gt; cluster each.
(One is for running a dev and a staging environment, the other one is running the production environment.)&lt;/li&gt;
&lt;li&gt;🔑 Secrets are stored in AWS &lt;strong&gt;Secrets Manager&lt;/strong&gt; and synced into the cluster via &lt;a class="link" href="https://github.com/external-secrets/kubernetes-external-secrets" target="_blank" rel="noopener"
&gt;ExternalSecrets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;⛔️ You are &lt;strong&gt;not allowed&lt;/strong&gt; to store secrets in Git, not even in encrypted form.&lt;/li&gt;
&lt;li&gt;🪣 The secrets are JSON files and the &lt;strong&gt;key names&lt;/strong&gt; are important, so you want to store them in Git.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I did as a first step was to create sample secrets files that contained the keys but no valid data (kind of the &lt;em&gt;schema&lt;/em&gt; of the secrets):&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secrets
├── dev # One directory per target environment
│   └── .keep
├── staging
│   └── .keep
├── prod
│   └── .keep
├── config1.sample.json # One sample file per secret
├── service2.sample.json
└── service3.sample.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I put the keys I needed into the sample files and as a value a description of what to put in (or e.g. from which Password Service to fetch the value from).
The file &lt;code&gt;service2.sample.json&lt;/code&gt; would e.g. look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;EXTERNAL_API_KEY&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;API Key of EXTERNAL_SERVICE&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;CLOUD_SERVICE_CLIENT_SECRET&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;client secret for accessing CLOUD_SERVICE&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;CLOUD_SERVICE_PASSWORD&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;password for accessing CLOUD_SERVICE&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;#34;BASIC_AUTH_PASSWORD&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;password for sending via Basic Auth&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The target structure I wanted to achieve was this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secrets
├── dev
│   ├── config1.json # This file contains the *keys* of
│ │ # secrets/config1.sample.json
│ │ # and the actual secret *values*!
│   ├── service2.json
│   ├── service3.json
│   └── .keep
├── staging
│   ├── config1.json # Contains key of sample file and
│ │ # values for staging environment.
│   ├── service2.json
│   ├── service3.json
│   └── .keep
├── prod
│   ├── config1.json
│   ├── service2.json
│   ├── service3.json
│   └── .keep
├── config1.sample.json
├── service2.sample.json
└── service3.sample.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to not commit any actual secrets into version control, I added the following entries to my &lt;strong&gt;.gitignore&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Ignore secret data ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;secrets/**/*.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# ... but keep the samples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;!secrets/*.sample.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="copying-the-samples"&gt;Copying the Samples
&lt;/h3&gt;&lt;p&gt;Now how do you copy the files to all environment&amp;rsquo;s directories?
And how do you make sure you copy them &lt;em&gt;exactly once&lt;/em&gt; (so you don&amp;rsquo;t lose the secrets you already entered)?&lt;/p&gt;
&lt;p&gt;You could create a script with the following logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# For each environment directory:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;## For each sample file:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;### Extract the service name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;### Check if target secret file already exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;### If not, copy sample to target file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But now, 🏗 Make to the rescue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;### Variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Fetch all sample files.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nv"&gt;secrets_samples&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;wildcard secrets/*.sample.json&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Construct the paths for all dev secrets destinations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nv"&gt;dev_secrets&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst secrets/%.sample.json,secrets/dev/%.json,&lt;span class="k"&gt;$(&lt;/span&gt;secrets_samples&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Construct the paths for all staging secrets destinations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nv"&gt;staging_secrets&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst secrets/dev/%,secrets/staging/%,&lt;span class="k"&gt;$(&lt;/span&gt;dev_secrets&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Construct the paths for all staging secrets destinations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nv"&gt;prod_secrets&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst secrets/dev/%,secrets/prod/%,&lt;span class="k"&gt;$(&lt;/span&gt;dev_secrets&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Gather the paths of all secrets&amp;#39; destinations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nv"&gt;all_secrets&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;dev_secrets&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;staging_secrets&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;prod_secrets&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;### Rules
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🎯 Purpose: &amp;#34;Copy all samples to their destinations.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🤓 What Make sees: &amp;#34;When you build the file secrets.copy-templates,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# make sure that all files in $(all_secrets) have been built first.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 👩‍🏫 Explanation: A rule can be empty, and a rule can have prerequisites
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# on the first line. I like to think of such a rule as a kind of shortcut.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets.copy-templates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;all_secrets&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🎯 Purpose: &amp;#34;Ensure that Make still runs the job &amp;#39;secrets.copy-templates&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# even if a file called &amp;#39;secrets.copy-templates&amp;#39; is created.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🤓 What Make sees: &amp;#34;I am supposed to always build secrets.copy-templates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# even if that file already exists.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;.&lt;span class="n"&gt;copy&lt;/span&gt;-&lt;span class="n"&gt;templates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🎯 Purpose: &amp;#34;Copy the file on the right to the file on the left.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 🤓 What Make sees: &amp;#34;When a file matching the pattern secrets/dev/(.*).json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# is built, execute this rule.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Also first make sure that the corresponding file secrets/$1.sample.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# has been built before.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# And the rule is: Copy the source file on the right ($&amp;lt;) to the destination
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# file on the left ($@).&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# 👩‍🏫 Explanation: These 3 rules are applied when you call secrets.copy-templates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# because it requires $(all_secrets) to be built.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets/dev/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; cp $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;secrets/staging/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; cp $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;secrets/prod/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; cp $&amp;lt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you now execute &lt;code&gt;make secrets.copy-templates&lt;/code&gt;, the sample files will be copied to all environment directories.
And if you run that same command again, 🙊 &lt;strong&gt;Make will not copy anything&lt;/strong&gt; because it intelligenty detected that the source files have not changed since the last execution.&lt;/p&gt;
&lt;p&gt;The code above is certainly not optimal - I bet you could abstract away the environment names with bit of metaprogramming, but let&amp;rsquo;s not optimize prematurely.
I think the result is already impressive, especially if you consider the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;☝️ You don&amp;rsquo;t even have to call the job explicitly to run it.
As long as &lt;code&gt;secrets.copy-templates&lt;/code&gt; is the first build defined in the Makefile, you can even execute just &lt;code&gt;make&lt;/code&gt; &lt;em&gt;without any parameters&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;👨‍💻 Onboarding a new colleague to your repository now sounds a lot more like:
&amp;ldquo;Yes, do read the README, but above all execute &lt;code&gt;make&lt;/code&gt;.&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;⛑ This is especially true if your Makefile contains &lt;strong&gt;&lt;a class="link" href="https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html" target="_blank" rel="noopener"
&gt;good help texts&lt;/a&gt;&lt;/strong&gt; for every rule.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="how-not-to-shoot-yourself-in-the-foot"&gt;How Not To Shoot Yourself in the Foot
&lt;/h4&gt;&lt;p&gt;Make was made primarily for building binaries from source code.
The fact that we are able to use it in the way described above comes with a warning:
If you do the following, you will lose the secret data you already entered into the secret files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Execute &lt;code&gt;make secrets.copy-templates&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Edit a &lt;strong&gt;sample file&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;make secrets.copy-templates&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;💥 Make will &lt;strong&gt;copy and overwrite&lt;/strong&gt; the edited sample file to all environment secret files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why?
Make compares timestamps, and when the source has a newer last-modified timestamp than the destination it will execute the rule&lt;/p&gt;
&lt;p&gt;Can we circumvent this?
We sure can.
You can either make sure that you edit each environment file after editing the sample file.
Or you change the last-modified timestamp &lt;strong&gt;via a build&lt;/strong&gt; in the Makefile 😉:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;secrets.ensure-copy-once&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; f in &lt;span class="k"&gt;$(&lt;/span&gt;all_secrets&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="nv"&gt;$$&lt;/span&gt;f &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch &lt;span class="nv"&gt;$$&lt;/span&gt;f&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now whenever you edit a sample file &lt;em&gt;after the initial secrets.copy-templates&lt;/em&gt; you run this build via &lt;code&gt;make secrets.ensure-copy-once&lt;/code&gt; and 🛡 your secrets will not be deleted.&lt;/p&gt;
&lt;h3 id="extension-environment-specific-sample-files"&gt;Extension: Environment-specific Sample Files
&lt;/h3&gt;&lt;p&gt;One implicit assumption in my structure was that the secrets in service2 will always have the same schema &lt;strong&gt;in every environment&lt;/strong&gt;.
One day it so happened that service2 needed to have additional keys on prod, but they &lt;strong&gt;should not be present&lt;/strong&gt; on dev or staging.&lt;/p&gt;
&lt;p&gt;I adjusted my desired structure like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;secrets
├── dev
│   ├── config1.json
│   ├── service2.json # Contains keys from service2.sample.json
│   ├── service3.json
│   └── .keep
├── staging
│   ├── config1.json
│   ├── service2.json # Contains keys from service2.sample.json
│   ├── service3.json
│   └── .keep
├── prod
│   ├── config1.json
│   ├── service2.json # Contains keys from service2.sample.prod.json
│   ├── service3.json
│   └── .keep
├── config1.sample.json
├── service2.sample.json # Default sample file
├── service2.sample.prod.json # Prod-specific sample file
└── service3.sample.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And I wrote my first &lt;strong&gt;Makefile function&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# A Make function can take in an arbitrary number of numbered parameters.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="err"&gt;define&lt;/span&gt; &lt;span class="err"&gt;copy_template&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="c"&gt;# Check if there is a more environment-specific sample file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; ENVIRONMENT :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;&amp;#39;s#secrets/(.*)/.*#\1#&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; ENVIRONMENT_SAMPLE_FILE :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.sample.json,%.sample.&lt;span class="k"&gt;$(&lt;/span&gt;ENVIRONMENT&lt;span class="k"&gt;)&lt;/span&gt;.json,&lt;span class="k"&gt;$(&lt;/span&gt;1&lt;span class="k"&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; @# If environment-specific file exists, copy it to destination
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ENVIRONMENT_SAMPLE_FILE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;ENVIRONMENT_SAMPLE_FILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;2&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="err"&gt;endef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Calling a Make function works by executing &amp;#39;call&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# with the function name and all its parameters as a list.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# My previous rules now became this:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets/dev/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call copy_template,$&amp;lt;,&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;secrets/staging/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call copy_template,$&amp;lt;,&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;secrets/prod/%.json&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt;/%.&lt;span class="n"&gt;sample&lt;/span&gt;.&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call copy_template,$&amp;lt;,&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="-perfect-symphony-calling-scripts-from-make"&gt;🍣 Perfect Symphony: Calling Scripts From Make
&lt;/h3&gt;&lt;p&gt;It&amp;rsquo;s all good and nice to have your secrets created, but how do you deploy them to AWS Secrets Manager?
Of course you write a thin wrapper around the wonderfully verbose AWS CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -euo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# set -x # DEBUG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;secret_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Use second argument or read stdin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;secret_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-$(&lt;/span&gt;cat -&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$secret_value&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="c1"&gt;# DEBUG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Create secret in idempotent way, avoid script from failing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;set&lt;/span&gt; +e
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;aws secretsmanager create-secret --name &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$secret_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -e
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Put secret value and output response to stdout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;aws secretsmanager put-secret-value --secret-id &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$secret_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; --secret-string &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$secret_value&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In your terminal you would call it e.g. like this:&lt;br&gt;
&lt;code&gt;./helpers/deploy-secret.sh envs/dev/config1-secrets &amp;lt; secrets/dev/config1.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a generic rule in Make to execute this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# The dependency on $(all_secrets) is to make sure that the secrets files exist
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# before deploying them.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secret.deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;all_secrets&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ./helpers/deploy-secret.sh &lt;span class="k"&gt;$(&lt;/span&gt;name&lt;span class="k"&gt;)&lt;/span&gt; &amp;lt; secrets/&lt;span class="k"&gt;$(&lt;/span&gt;environment&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;filename&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The call to the script that you executed above would become this:&lt;br&gt;
&lt;code&gt;make secret.deploy name=envs/dev/config1-secrets environment=dev filename=config1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As we have multiple services, let&amp;rsquo;s add one rule per service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# The secret values in this one are the same across all environments
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secret.deploy.config1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;envs/config1-secrets &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;config1.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# service2 has different secret values on the different environments
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secret.deploy.service2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;envs/&lt;span class="k"&gt;$(&lt;/span&gt;environment&lt;span class="k"&gt;)&lt;/span&gt;/service2-secrets &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;service2.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# service 3 also has environment-specific secret values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secret.deploy.service3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;envs/&lt;span class="k"&gt;$(&lt;/span&gt;environment&lt;span class="k"&gt;)&lt;/span&gt;/service3-secrets &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;service3.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can tie these together into one rule for a whole environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Deploy all secrets for one environment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets.deploy.all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy.config1
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy.service2
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secret.deploy.service3
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Deploy all secrets for the dev cluster
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets.deploy.dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secrets.deploy.all &lt;span class="nv"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secrets.deploy.all &lt;span class="nv"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;staging
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;# Deploy all secrets for the prod cluster
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="nf"&gt;secrets.deploy.prod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; secrets.deploy.all &lt;span class="nv"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prod
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;✅ Once you are authenticated to the corresponding AWS account, you can deploy your secrets with either &lt;code&gt;make secrets.deploy.dev&lt;/code&gt; or &lt;code&gt;make secrets.deploy.prod&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="summarizing"&gt;Summarizing
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Make gives you a consistent and clean Developer API.&lt;/li&gt;
&lt;li&gt;Make is almost universally installed everywhere.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t decide between either Make &lt;strong&gt;or&lt;/strong&gt; Shell - use both together.
Refactor more complex logic into separate Shell scripts (like isolated functions) which are called from within Make.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out the entire Makefile (including the secrets structure and scripts) in this &lt;a class="link" href="https://github.com/jscheytt/jscheytt.github.io.hugo/tree/main/content/post/story-first-makefile" target="_blank" rel="noopener"
&gt;Git repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="credits"&gt;Credits
&lt;/h2&gt;&lt;p&gt;I am indebted to the following parties in making my start into the world of Make a lot smoother than I expected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isaac Z. Schlueter for his &lt;a class="link" href="https://gist.github.com/isaacs/62a2d1825d04437c6f08" target="_blank" rel="noopener"
&gt;interactive Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The guys at &lt;a class="link" href="https://www.upbound.io/" target="_blank" rel="noopener"
&gt;Upbound&lt;/a&gt; for creating &lt;a class="link" href="https://crossplane.io/" target="_blank" rel="noopener"
&gt;Crossplane&lt;/a&gt; where they use Make in &lt;a class="link" href="https://github.com/crossplane/provider-aws" target="_blank" rel="noopener"
&gt;their providers&lt;/a&gt; and even distribute &lt;a class="link" href="https://github.com/upbound/build" target="_blank" rel="noopener"
&gt;common functionality&lt;/a&gt; as a Git submodule&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>