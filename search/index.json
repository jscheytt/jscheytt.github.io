[{"content":"While listening to the Song of Songs recently, the following things stuck with me:\nThe Bridegroom marvels at the beauty of the Bride more than the Bride marvels at the beauty of the Bridegroom.\nIn chapter 4, the bridegroom praises the beauty of His bride for half the chapter. At the end of chapter 5, she in turn marvels at His beauty and strength. In chapter 6, the Bridegroom again speaks of her beauty, sometimes using similar or identical phrases as in chapter 4. And in chapter 7 the praise from His mouth increases and intensifies, partially even beyond the intimate circle of the two.\nFor me, this unfolds the following: Jesus knows our weakness and how much we depend on His affirmation. His constant and recurring attention is the foundation of our lives. Telling us the same thing multiple times does not tire Him. His love for us is unbroken, and He rejoices in every small step we take in devotion to Him.\nAnd the more steps we take toward Him and with Him, the more we grow in love for Him. Equally, the more we grow in love for Him, the more He can lavish His love upon us.\nBut in chapter 7 we see even more:\nüëè Turn, Sulamith, turn in circles as you dance, for we want to admire you!\nüòÑ What is there to see when I dance the dance of Mahanajim?\nThe beauty of the bride is not just for the Groom. Those outside the community get to see her beauty as well. \u0026ldquo;Creation waits in eager expectation for the children of God to be revealed.\u0026rdquo; (Romans 8:19) And Jesus delights in this - the beauty of His bride displayed is glory for Him, too!\nBut this beauty is not made visible to the public by the bride aiming at it ‚Äî neither at having the beauty for her own sake nor at being seen. She asks: \u0026ldquo;What\u0026rsquo;s the matter? I\u0026rsquo;m just dancing for joy as usual!\u0026rdquo; This is the beauty of life in the Kingdom of God: We become so rooted in God and in His love for us that real beauty and redeemed joy (even with dancing) grow naturally out of it.\n","date":"2022-12-28T11:29:10+01:00","permalink":"https://jscheytt.github.io/p/short-notes-on-the-song-of-solomon/","title":"Short Notes on the Song of Solomon"},{"content":"I recently heard a sermon about fasting and I was reminded of a dialogue between some Israelites and God in Zechariah 7 and 8:\nA group of Israelites have returned from exile in Babylon a little while ago. During the more than 70 years of exile, they developed a habit of holding fasting days on specific months ‚Äî a fasting of lament about the destruction of Jerusalem. They ask if they should continue this practice in light of the ongoing rebuilding of Jerusalem and the temple. The answer God gives is highly instructive about not just fasting but about our lives as a whole:\nWhen you fasted and mourned in the fifth month and in the seventh, for these seventy years, was it for me that you fasted?\nAnd when you eat and when you drink, do you not eat for yourselves and drink for yourselves?\nFasting and Eating For Whom? There seems to be a way of fasting where you are not fasting for God. (Let\u0026rsquo;s keep in mind: Fasting is not the mere outward act of abstaining from food, it\u0026rsquo;s abstinence from what normally physically satifies me so I am more receptive for God nourishing me directly.)\nBut not only is there a way of fasting without God, but there is also a way of eating without God. So you can do everything in your daily life either with or without God ‚Äî no matter if one activity seems \u0026ldquo;more holy\u0026rdquo; on the outside than another.\nThis is crucial: We always have a choice of either doing things for ourselves ‚Äî i.e. doing things alone, doing things just the way we want, trusting in our own strength ‚Äî or for God. What is so wonderful about doing things for God is that we are not first and foremost doing something for Him (although that is certainly part of it) ‚Äî it\u0026rsquo;s about doing everything with Him and in harmony or symphony with Him.\nThat is just another way of stating what the New Testament writers describe as:\nAnd whatever you do, in word or deed, do everything in the name of the Lord Jesus, giving thanks to God the Father through him.\nRedeeming Our Grief and Contortions God could have left it there, saying \u0026ldquo;First learn living in the ways of My goodness, then we can talk about fasting\u0026rdquo; (see the rest of Zechariah 7 after the top verse). But he does not simply cut off the false practice! In chapter 8 he revisits the topic and says:\nThe fast of the fourth, fifth, seventh, and tenth month shall be to the house of Judah seasons of joy and gladness and cheerful feasts. Therefore love truth and peace!\nWhen we return to God, all our sorrow and lament and even all our mislead religious efforts of trying to please Him are redeemed. He takes it all ‚Äî all our authentic grief and hurt but also all our perversions of what is good ‚Äî and turns it into feasts of joy!\n","date":"2022-12-12T20:28:12+01:00","permalink":"https://jscheytt.github.io/p/zechariah-fasting-and-eating-for-god/","title":"Zechariah ‚Äî Fasting and Eating for God"},{"content":"So What Exactly Do You Do For A Living? Whenever we meet new people (or good friends, it sometimes doesn\u0026rsquo;t make a big difference üòÑ), the above question will come up. My wife (who is a doctor and has understably fewer problems explaining her job) is always excited to get yet another chance to \u0026ldquo;finally understand\u0026rdquo; what it is that I am doing at work as a Cloud Automation Engineer.\nThat is the fancy title we at mimacom give to people working in Site Reliability Engineering and DevOps Engineering, and I have grown to really like it because it starts to convey a lot of meaning right away. Unfortunately, it\u0026rsquo;s also long and not particularly established (yet).\nIn this blog post I will explore one analogy that came to my mind recently. I have not tried it out in the wild yet, but I am fascinated by the similarities between deploying washing machines and deploying web applications.\nMy Latest Metaphor Let\u0026rsquo;s say I work in a company that builds, delivers, and maintains washing machines for laundromats. The colleagues in my team whom I work most closely with design new washing machine models. You could say they design or \u0026ldquo;develop\u0026rdquo; the washing machines.\nThey do this very frequently ‚Äî even so frequently, that they tweak the current model mostly on a daily basis. Whenever they change the model, we want to bring these improvements to our customers as quickly as possible.\nAnd here begins my responsibility as Laundry Automation Engineer‚Ñ¢Ô∏è.\nDelivering New Washing Machines There are several steps that now need to happen in succession until the new model lands at our customers (the laundromats). We also call this a pipeline:\nThe designers/developers wrote some simulations to check if the models they produce really work as they should. I run these simulations on a computer. I send the model to the factory to let some construction robots assemble it. I take the assembled model, plug it into current and water and run some standard washing programs and test for potential leaks and similar problems. I package up the assembled model (together with its necessary accessories) and put it into a van. And finally, I drive the new washing machine to the customer, connect the new washing machine, disconnect the old one and dispose of it. But a good Laundry Automation Engineer‚Ñ¢Ô∏è will normally not do any of these steps above themselves. Instead, he or she will build robots to do it for them. Robots are a lot more reliable, faster, and cheaper when it comes to repetitive tasks.\nSo, in short: I build robots that automate all the above steps.\nAnd if there is an error during any of the above steps, the pipeline for the current model change will stop (so we don\u0026rsquo;t deliver broken machines). I will then look what caused the error and fix it.\nLet\u0026rsquo;s zoom in on a few details around the last step when the robots install the new machines:\nZero-Downtime Our laundromats are very highly frequented, basically around the clock, even on weekends. People come and go all the time. They put their clothes into a machine, select a program, pay with coins or by card, set it off running, and return when their laundry is supposed to be ready.\nFor simplicity, I will now switch back to me as the one doing the actual work (instead of the robots). Whenever I install a new washing machine to replace a currently running one, I have to be very careful: The people running the laundromat want to have as few interruptions as possible so that people can start washing programs all the time. They know that if they have to many interruptions, potential customers will get annoyed because a queue will form, and if they have to wait for too long they will go elsewhere.\nSo normally, I will install the new washing machine first (connect to current and water), mark the old machine as \u0026ldquo;stale\u0026rdquo; (so customers can only get their laundry from it but not start any new programs), then disconnect the old one. This does introduce a little bit of energy and water overhead for the laundromat, but they happily pay that price. And good for me that in reality I have robots managing all this for me.\nBehind The Scenes: A Glossary Washing Machine: A web application that communicates over HTTP. It receives requests (dirty laundry and some program parameters) and delivers responses (clean laundry in the happy path). Laundromat: A company that makes most of its business value through running web applications and processing data in a value-adding way. Designer/Developer: An application developer writing code in a programming language. Bringing Improvements To The Customer Asap: We call this Continuous Delivery or Continuous Deployment. Laundry Automation Engineer: Just made this up. This would be the Cloud Automation Engineer / DevOps Engineer. Pipeline: The above example describes a Continuous Integration pipeline that also deploys at the end. Pipeline Step 1: This step could map to linting, unit testing, and static code analysis. Pipeline Step 2: This is a \u0026ldquo;build\u0026rdquo; or \u0026ldquo;compile\u0026rdquo; step. Pipeline Step 3: This step could map to integration testing, end-to-end-testing, fuzzying, and security testing of sorts. Pipeline Step 4: This is a \u0026ldquo;container image build\u0026rdquo; step. Pipeline Step 5: This is a \u0026ldquo;deploy\u0026rdquo; or \u0026ldquo;release\u0026rdquo; step. Robot: A script with prescribed steps which is executed automatically whenever a new change is published. Zero-Downtime: This is just a rough description of how I understand the default Deployment.spec.strategy.type=RollingUpdate. I think it\u0026rsquo;s not perfect but still fits good because in both situations you have the (somewhat conflicting) unbroken, continuous streams of requests/people and electricity. ","date":"2022-10-04T14:30:29+01:00","permalink":"https://jscheytt.github.io/p/i-install-washing-machines-my-latest-job-metaphor/","title":"I Install Washing Machines (My Latest Job Metaphor)"},{"content":"This is the second part of a series about The Beauty of the Law.\nWhat is the Law in the Bible? In a general sense, the Hebrew word \u0026ldquo;Torah\u0026rdquo; means \u0026ldquo;teaching\u0026rdquo; or \u0026ldquo;instruction\u0026rdquo;. This word often refers to the Pentateuch, the first five books of the Old Testament. In a stricter sense, the Law is just the roughly 600 commandments in these five books. (In Hebrew these are called the \u0026ldquo;Mitzwot\u0026rdquo;.)\nIn Exodus 20 we read the beginning of these commandments, and it is precisely here that we find the famous Ten Commandments. The previous part of this series showed how everything in the Law is not only a call to action but also a revelation of God\u0026rsquo;s character. This part of the series will simply elaborate further on that, this time looking into the Ten Commandments.\nQuotation blocks in this article with quotes are from the Bible, quotation blocks without quotes are my interpretation.\nThe Setting Before we dive into the precise commandments, let\u0026rsquo;s take a few moments to picture the scene:\nIsrael has lived many hundreds of years in Egypt, first as free people, then at the end as slaves because they thrived too much. God then calls His servant Moses to liberate His people. He leads the whole nation out among powerful signs, demonstrating His power and love for Israel. The biggest of these signs was when God rescued Israel by parting the Red Sea and leading them through it unscathed while their enemies drowned wholesale.\nHaving rescued these people, He now calls them into the desert. Moses brings them to Mount Sinai so they can encounter God because He wants to reveal Himself to every single Israelite personally ‚Äî not just to Moses!\nThe Israelites prepare for three days, purifying themselves. The encounter at the third day is radical and overwhelming: The mountain is on fire, dark clouds surround it, a trumpet blows ever louder and louder. They cannot see the Holy, Invisible God, but they hear His voice, saying:\nI Am The Lord Your God \u0026ldquo;I am the Lord your God. I brought you out of Egypt. That is the land where you were slaves.\u0026rdquo;\nThis is how God addresses His beloved people. This is what He first says to Israel, the nation with whom He wants to enter into a marriage-like covenant. He does not start by commanding anything. His first words answer the questions \u0026ldquo;Who am I?\u0026rdquo; and \u0026ldquo;Who are you in relation to Me?\u0026rdquo;\nI think this is more important than we often recognize. We humans are so often confused about who we are. We need someone outside of ourselves to tell us who we are, to speak identity into our lives so that we can become who we were always meant to be. We see this with Peter where Jesus tells him that he is a rock upon whom He will build His church.\nGod says that He is \u0026ldquo;the Lord your God\u0026rdquo;. \u0026ldquo;Lord\u0026rdquo;, in this instance, is the typical rephrasing \u0026ldquo;Adonai\u0026rdquo; instead of the \u0026ldquo;Yahweh\u0026rdquo; name. And although \u0026ldquo;Yahweh\u0026rdquo; means \u0026ldquo;I am\u0026rdquo;, I want to talk about lords for a moment:\nIn the Old Testament language, being a slave to a master or lord did not only mean \u0026ldquo;working for someone\u0026rdquo;. It also included \u0026ldquo;belonging to someone\u0026rdquo;. If God says that He is the Lord then we are His slaves and we belong to Him. But I think this extends even further: Not only do we belong to Him (because He liberated us from the slavery of sin), but He also belongs to us.\nThis is not what we necessarily see precisely in this part of scripture, but read the prophets and it\u0026rsquo;s all over the place: God entered into a marriage covenant with Israel at Mount Sinai. He tied Himself to this group of people, and in a marriage both spouses possess each other. They have committed to each other for a lifetime and everything either does will affect the other, both for good and for bad.\nLet this sink in: The Eternal God who made the universe lowers Himself to talk to His creation, those shaky bones and Holy Breath which He formed into humans, and deeply desires to become one with them. He offers up Himself to these small beings He created in His likeness, telling them \u0026ldquo;You possess Me, and I possess you.\u0026rdquo;\nI Brought You Out Of Slavery You were not born in freedom. You were living under the slavery of sin ‚Äî remember this.\nYou have not liberated yourself from this slavery on your own. It was not your politicians (Moses), your money, your connections that saved you from eternal slavery. It was I who rescued you ‚Äî so you could become Mine and I could become yours!\nRemember Egypt and the signs and miracles with which I lead you out from there. This is how much you are worth to Me!\nYou Will Have No Other Gods Beside Me \u0026ldquo;You shall have no other gods beside Me.\u0026rdquo;\nThe Hebrew word for \u0026ldquo;beside Me\u0026rdquo; here means \u0026ldquo;on the same level as Me\u0026rdquo; or \u0026ldquo;next to My face\u0026rdquo;. We hear the same Jealous Husband here that we also encounter in prophetical books like Hosea:\nI want to be the highest priority in your life. I am Life, and I want to be your life.\nOne interesting thing in the whole passage in Exodus 20 is that all the \u0026ldquo;You shall\u0026rdquo; phrases in this chapter can also be translated as \u0026ldquo;You will\u0026rdquo;. For me this makes the whole section sound not only like commandments but also like a promise of a different kind of life:\nWhen you say \u0026ldquo;Yes\u0026rdquo; to Me and enter into this covenant relationship with Me, then this is the kind of life you will lead: You will have no other Gods beside Me, you will not abuse My name, you will rejoice in the Sabbath, you will honor your parents, \u0026hellip;\nYou Will Not Make Yourself Idol Images \u0026ldquo;You will not make for yourself a statue or any likeness of anything that is in the sky, on the earth or in the waters. You will not adore them or serve them.\nFor I, the Lord your God, am a jealous God, afflicting the guilt of the fathers on the children and grandchildren of those who despise me ‚Äî but showing steadfast love to thousands of generations of those who love me and keep my commandments.\u0026rdquo;\nWhen you enter into this covenant with Me, you will love first of all Me and not the signs of My grace towards you. You were not made to be the bride or the servant of anybody else but Me who made you and who has always loved you.\nI desire your love! Your love or disinterest makes a tremendous difference for me. When you love Me, I will love you back ever more lavishly. And I will also pour out my kindness and goodness on thousands of generations after you.\nIf you run after others, I will be most jealous and relentless in my pursuit to get back your whole attention. When you reject me, then I will shake you so you wake up and recognize that all the good in your life which you rely upon comes only from Me. And you will recognize that My grace is a thousand times greater than the punishment I may enact to bring you back to Me \u0026hellip;\nYou Will Not Exploit My Name \u0026ldquo;You will not pronounce the name of the Lord your God in vain, for the Lord will not hold anyone guiltless who pronounces His name in vain.\u0026rdquo;\nLet\u0026rsquo;s look at the words \u0026ldquo;pronounce\u0026rdquo; and \u0026ldquo;in vain\u0026rdquo; a bit closer: The Hebrew verb nasa (for \u0026ldquo;pronounce\u0026rdquo;) mainly means \u0026ldquo;carry\u0026rdquo;, \u0026ldquo;lift up\u0026rdquo; or \u0026ldquo;take\u0026rdquo;. I guess that to nasa God\u0026rsquo;s name means to \u0026ldquo;take His name into our mouths\u0026rdquo; (i.e. pronounce His name out loud) or \u0026ldquo;exalt His name\u0026rdquo;.\nThe Hebrew adjective shav (for \u0026ldquo;vain\u0026rdquo;) is used to describe things that are \u0026ldquo;vain/futile\u0026rdquo;, \u0026ldquo;wrong\u0026rdquo;, \u0026ldquo;nothing\u0026rdquo;, or even \u0026ldquo;fraud\u0026rdquo;. On top of that, we know that names in the Jewish culture are not mere words: They always express the character of that person.\nAdditionally, we see Jesus making an important point in the Sermon on the Mount: We should never manipulate others by overriding their free will, as we would do e.g. by appealing to God or any high authority so we could make the things we say sound better than what they actually are.\nIn conjunction, for me this \u0026ldquo;name commandment\u0026rdquo; unfolds like this:\nDo not exploit My name and My character to foster your vain projects or ‚Äî even worse ‚Äî your fraud! If you try to simply have your own way by abusing Me and My love, especially by coercing others to trust your shiny words, you are no longer living from the Tree of Life ‚Äî and you will reap accordingly.\nBut when you live in My Kingdom, you can completely afford to openly and vulnerably speak the truth, and you have no need to say anything beyond it. For I am The Truth, and under My loving reign you will become more and more like Me.\nKeep The Sabbath \u0026ldquo;Remember to keep the Sabbath day, to keep it holy. Six days you shall labor and do all your work, but the seventh day is a day of rest for the Lord your God. You shall not do any work on it, neither you nor your children, neither your male nor your female servant, not even the animals or the foreigners living in your towns.\nFor in six days the Lord made the heavens and the earth, the sea and all that is in them, and He rested on the seventh day. Therefore the Lord blessed the Sabbath day and made it holy.\u0026rdquo;\nAmong all the commandments in Exodus 20, this is the one that makes it the most obvious that we should act in certain ways because God does so ‚Äî and not primarily because He says so. Children will always learn more deeply by imitating what their parents do. And we have the greatest and best Father there is and ever will be: His words and actions will never contradict each other!\nHow refreshing and clarifying are the words of the prophet Isaiah about the Sabbath:\n\u0026ldquo;You will call out to to Me for help and I will answer you. I will always guide you. I will satisfy your needs in a land baked by the sun. You will be like a garden that has plenty of water. If you keep your foot from the Sabbath, from doing your pleasure on my holy day, and call the Sabbath a delight and the holy day of the Lord honorable, then you will find your joy in Me.\u0026rdquo;\nThis is the kind of life we are invited into: In His Kingdom, we are untied from our reliance upon earthly things and upon our hard work. By learning to place our trust in Him, we can truly start to enjoy one full day of rest every week because we have learned that our lives are not in our own hands. There is Someone Infinitely Good providing for us and inviting us into intimacy with Him. This is truly the place where we find abundant life that is available nowhere else.\nHonor Your Parents \u0026ldquo;Honor your father and your mother. Then you will live a long time in the land the Lord your God is giving you.\u0026rdquo;\nGod is a father and He wants to be honored. On the other hand, God is also a son and wants to honor his father. We can imitate Him by honoring the people who brought us into this life on a biological level, showing them our deep respect and love ‚Äî even though our families are often the places where we are wounded the most.\nYou have learned to honor Me and obey what I say. Now, you can subject yourself to your mother and father freely, knowing you are not in their hands but in My loving care first. In Me, you are finally able to respect them and keep your heart vulnerably open at the same time.\nYou Will Not Kill \u0026ldquo;You will not murder\u0026rdquo; ‚Äî for I am The Life. You will not take life away from others to secure your own life.\nRemember: Your life ended when you entered into a covenant with Me, and what you live now, you live in and through Me. And through Me, your life will become a place where others thrive, where they come alive and their lives start to unfold and blossom.\nYou Will Not Break Marriage \u0026ldquo;You will not commit adultery\u0026rdquo; ‚Äî for I am Faithfulness. You will be faithful to your spose ‚Äî not because he or she deserves it but because you have learned to be faithful to Me, and because you are becoming more and more like Me.\nThe way you lead your marriage and all your relationships with the other sex will display My relationship with My bride.\nYou Will Not Steal \u0026ldquo;You will not steal\u0026rdquo; ‚Äî for I am your Provider. I give you more than enough. You are no longer poor because I am rich for all who call on me. In this deep bond with Me, you share in this wealth and this fullness of life.\nYou don\u0026rsquo;t have to live in fear any longer and grasp feverishly for things to secure your survival. You are no longer bound to a self-centered and ultimately self-destroying life: Out of My riches you can totally afford to generously give to others around you and love lavishly.\nYou Will Not Lie Against Others \u0026ldquo;You will not be a false witness against your neighbor\u0026rdquo; ‚Äî for I am The Truth. You no longer have to fight against others at all. You can simply say the truth, and say it in Love.\nYou can afford to be honest and vulnerable because when you are in Me, nobody can ultimately harm you. Yes, you can afford to speak the truth even about your enemies, and even if it causes you disadvantage or harm at first ‚Äî because you are not living from your limited resources but from Me, Life Himself.\nYou Will Not Envy \u0026ldquo;You will not covet your neighbor\u0026rsquo;s house or wife, male or female servant, ox or donkey or anything that is your neighbor\u0026rsquo;s\u0026rdquo; ‚Äî for I am your Great Reward and the one who satisfies all your deepest needs.\nEnvy for others\u0026rsquo; success, happiness or wealth will not be part of your life because you are not living from a reality of poverty anymore. No, even better: You will be free to genuinely rejoice in the good that others around you experience, maybe even more than they themselves enjoy it!\nThis is the second part of a series about The Beauty of the Law. Here is Part 1.\n","date":"2022-09-18T18:28:05+02:00","permalink":"https://jscheytt.github.io/p/the-ten-commandments-an-invitation-into-life-itself/","title":"The Ten Commandments ‚Äî An Invitation Into Life Itself"},{"content":"This is the first part of a series about The Beauty of the Law.\nAbout two years ago God began revealing Psalm 119 to me. This longest of all Psalms with its almost 200 verses is often feared for its length and especially its seemingly bizarre praise of \u0026ldquo;The Law\u0026rdquo;. This refers to the Torah (the first 5 books of the Bible) and in a stricter sense to the commandments of the Torah.\nI was always among those with whom this chapter never rang. But what I then started realizing is that there is so much personal closeness to God pulsing throughout this Psalm. The writer is not just talking about the Law in a general, abstract sense but instead he is constantly addressing God. This Psalm is a place of encounter with the God of the Law. And the writer desires to know Him more and endlessly reflects upon the goodness of the whole of Scripture:\nThe sum of Your Word is truth, and every one of Your righteous rules endures forever!\nWe have come to know that truth is not mere facts ‚Äî truth is Someone, a person we can know; you might even say He is The Person. Just like the apostle John writes in the prologue of his gospel: Jesus is the Word In Person. So when reading Scripture ‚Äî any part of the Bible, even the Torah and its commandments ‚Äî you are bound to encounter Him everywhere, all over the place!\nOut of this marvelling I suddenly realized that I effectively had no idea what the Law is, even after having read through the whole Bible multiple times in my life. So I started reading the Torah, exploring it and falling in love with it. Let me share some beautiful findings from my journey so far:\nGod Reveals His Character In The Law Leviticus in the Old Testament and the gospel of John in the New Testament are the books of the Bible where the phrase \u0026ldquo;I am\u0026rdquo; appears most often (about 50 times in each book). In John, these are mostly the famous \u0026ldquo;I am\u0026rdquo; sentences by Jesus like \u0026ldquo;I am the Bread of Life,\u0026rdquo; \u0026ldquo;I am the Good Shepherd,\u0026rdquo; or \u0026ldquo;I am the Resurrection and the Life.\u0026rdquo; In Leviticus, the most common phrase is \u0026ldquo;(For) I am the Lord (your God).\u0026rdquo; Although in John the speaker of each \u0026ldquo;I am\u0026rdquo; phrase is not always Jesus, we can get a feeling that the identity of God and His people is front and center in both of these books.\nThe chapter with the highest density of \u0026ldquo;I am\u0026rdquo; in Leviticus is chapter 19. This has become one of my favorite chapters in the Bible: We read all kinds of commandments there, and almost every second or third sentence is \u0026ldquo;(For) I am YHWH (your God)\u0026rdquo;. It\u0026rsquo;s almost as if these were not mere commands but that they instead reveal something about the very character of God. Everything in this chapter (and by extension, the whole of the Torah) therefore becomes not just a statement about what we should do but also about who He is.\nExamples From Leviticus 19 Let\u0026rsquo;s try a few excerpts from this chapter:\nEvery one of you shall revere his mother and his father, and you shall keep my Sabbaths: I am the Lord your God.\nNot only are we told to honor our parents and lay down our working on the Sabbath, but we also learn that this has something to do with God\u0026rsquo;s nature: Focussing only on the Sabbath for now, we read in the Ten Commandments that \u0026ldquo;in six days the Lord made the heavens and the earth, and He rested on the seventh day.\u0026rdquo; God wants us to share this resting in Himself, He wants us to rest in that same Peace.\nHe gives us commandments not because He is a tyrant who changes His plans at whim but because He is infinitely good and wants us to share in His character and actions. He made us in His likeness, and Jesus is the one who came to open up God\u0026rsquo;s Kingdom to us so we can truly \u0026ldquo;be children of your Father in the Heavens.\u0026rdquo;\nHere is another \u0026ldquo;law\u0026rdquo; from chapter 19:\nYou shall not strip your vineyard bare, you shall leave the fallen grapes for the poor: I am the Lord your God.\nGod loves the poor and cares for them. He will look after them and provision for them, even when people around them ignore them. Of course we are to act just like Him! He adopted us in Jesus and we are His sons and daughters, and children learn naturally by imitating their parents.\nThis way of imitating is something Jesus frequently talks about in the Gospel of John:\nThe Son can do nothing of his own accord, but only what He sees the Father doing.\nFor wathever the Father does, that the Son does likewise.\nOther verses in Leviticus 19 and the Torah in general are harder to discern for me currently. However, the more you start to explore the Law in search for Him, the more you will find Him. I don\u0026rsquo;t assume I get everything of the following completely right, but let\u0026rsquo;s take a look at the commandment in verses 6 through 8 about eating the sacrifice meat only during the 3 days after the act of sacrificing: At first this sounds illogical and the consequence of exclusion from the sacred community very harsh.\nHowever, God never meant for us to eat food from sacrificial acts alone. He always wanted those who sacrificed an animal for Him to celebrate together in His presence. By keeping some of this prepared, holy meat and eating it later ‚Äî at any time of our own liking ‚Äî we would treat something that was meant for communion and closeness with God and others as something we can exploit selfishly on our own.\nThat is not the way He has meant for us to live ‚Äî neither in the context of sacrifices nor in basically any other part of life. He wants to make us into beings that can and will naturally live in loving harmony and interaction with Him every moment of each day.\nJesus Is The Fulfillment Of The Law The initial followers of Jesus in the first century were Jews. They knew the Law well, from learning to read and write in the Torah schools and from the synagogue. It was probably in some sense easier for them than for us today to understand what Jesus meant when He said in Matthew 5:\nDo not think that I have come to abolish the Law or the Prophets;\nI have not come to abolish them but to fulfill them.\nDoes that only mean that Jesus simply obeyed all the commandments in the Torah to the letter? Is that all there is to Jesus in particular and, more generally, to the life we can lead through Him?\nThe letter to the Hebrews helps to complete the picture: It is directed to just such people that came from the Jewish tradition and had gotten to know God the Father through His Son Jesus. And it draws from the rich imagery of the whole Old Testament to make an important point: Jesus is the fulfillment of every part of the Old Covenant:\nHe is higher than the angels, better than Moses, the 100 % perfect High Priest in the actual, original Sanctuary in the Heavens. He has offered up Himself as the one ultimate and completely spotless sacrifice. The Gospel of Matthew, as a complement, makes it clear that Jesus is not only the fulfillment of everything displayed in the Law but also the fulfillment of everything announced in the Prophets.\nSo Jesus did not just comply with the Law, He is also The Original that preceded it. Everything we see in the Old Covenant is ultimately an image, a reduced snapshot of the One True Savior. It is not the real thing itself, it simply points towards The One To Come and projects a pre-image of Him.\nThe beautiful thing we see in Hebrews is this: Just because the Old Covenant was a reduced image and an imperfect projection of The Real Thing, we don\u0026rsquo;t have to throw away our Old Testaments because \u0026ldquo;we now have Jesus\u0026rdquo;. Jesus also said (see above) that He was not going to abolish them, but fulfill them. Rejecting the Old Testament because it was incomplete would be outright wrong, just as would be rejecting sex in marriage because it is an incomplete image of the union of Christ and His Bride. Everything on this planet will be an incomplete image of God\u0026rsquo;s glory until He returns.\nHow Do We Now Live In This Fulfillment? Romans and Galatians show clearly: If you try to justify yourself by fulfilling the laws, you have to fulfill them all. No person has ever managed to do that apart from Jesus. And He knew perfectly well that our hearts cannot be deeply transformed by merely \u0026ldquo;checking all the boxes\u0026rdquo;.\nDiscussing which of the Torah commandments are still relevant today and which are not would completely miss the point: Living in the Kingdom of Jesus is just the opposite of justifying our lives on our own terms and through our own doing. Instead, Jesus Himself has become our righteousness and the justification for our existence.\nHe is inviting us to whole different kind of life: Not eating from the Tree of Knowing Good and Evil but from Him, the Tree of Life. By throwing away the ways of our own carefully engineered righteousness and placing our trust in Him, our hearts will be healed and we will no longer need a list of rules to comply with so we can make ourselves good. Instead, we will live from Him, with Him, in Him. This is what Jesus describes when He says this:\nNow this is eternal life: to know you, the only true God, and to know Jesus Christ, whom You have sent!\nWith this in mind, we can turn towards the Old Testament and especially the Torah and discover Jesus in there and contemplate the beauty of the Law ‚Äî because it displays His character. This makes me say with the words of Psalm 119:\nOpen my eyes and reveal to me the wonders in Your Law!\nThis is the first part of a series about The Beauty of the Law. Here is Part 2.\n","date":"2022-09-05T10:32:01+02:00","image":"https://images.pexels.com/photos/5192347/pexels-photo-5192347.jpeg?cs=srgb\u0026dl=pexels-maor-attias-5192347.jpg\u0026fm=jpg\u0026w=1000","permalink":"https://jscheytt.github.io/p/the-beauty-of-the-law/","title":"The Beauty of the Law"},{"content":"As part of my journey through the Tanakh, I recently came across the book of Ruth. I want to share some things from this book and its surroundings that really stood out to me afresh.\nThe Surrounding Context of Scripture In the Tanakh order of books, Ruth is directly preceded by the book of Proverbs. The last chapter, Proverbs 31, talks about the \u0026ldquo;woman of noble character\u0026rdquo;. And in Ruth 3, Boaz interestingly calls Ruth such an \u0026ldquo;woman of noble character\u0026rdquo; (he is using the exact same Hebrew word for \u0026ldquo;noble\u0026rdquo; as in Proverbs 31). This alone starts showing how it\u0026rsquo;s not about being an Israelite in the first place that gives you God\u0026rsquo;s recognition but by placing your full trust in Him. We will see in a moment how Ruth is an example of this.\nThe book directly after Ruth in the Tanakh order is the Song of Songs. One of the main themes is how the woman and the man seek and chase each other. Ruth in this story is not chasing any human lover however ‚Äî she goes after God. This sets the scene wonderfully to show how even the seemingly most earthly-romantic book in Scripture is not just about humans, it\u0026rsquo;s also about humans together with God: We as Jesus\u0026rsquo; bride are to seek Him and chase after Him in all that we do.\nRuth Puts Her Trust In God When Ruth and her sister-in-law Orpah rise to accompany their mother-in-law Naomi back to Israel, Naomi tells them to leave for a better future in their homecountry, Moab. Orpah leaves but Ruth proclaims her loyalty to Naomi:\nDon\u0026rsquo;t urge me to leave you or to turn back from you. Where you go I will go, and where you stay I will stay. Your people will be my people and your God my God. Where you die I will die, and there I will be buried.\nThis alone does not make it look a lot like Ruth would put her trust mostly in God. But a few verses later, Boaz nails it by speaking out what was deep in Ruth\u0026rsquo;s heart (2:12):\nMay the Lord repay you for what you have done! May you be richly rewared by the Lord, the God of Israel, under whose wings you have come to take refuge!\nThat\u0026rsquo;s right:\nRuth did not come to take refuge under Naomi\u0026rsquo;s wings: This embittered mother-in-law, blinded by her self-centered grief, unable to care for herself as a widow, was in no way a future prospect for Ruth. Leaning unto this woman when you just lived through a tragic loss yourself was certainly not an easy task and one that you needed to rely on Someone Else. Ruth would not come to take refuge under the wings of the people of Israel either: Going to Israel and trying to live there she would certainly face ostracism and poverty because she was a foreigner, and a widow at that! I suspect that during the 10 years she was married to Mahlon, Ruth got to know the God of Israel intimately when she experienced the life of a Jewish family through the course of each day, week, and year.\nClinging We read that Orpah leaves Naomi, but Ruth \u0026ldquo;clings to her\u0026rdquo;. The Hebrew word for \u0026ldquo;clinging\u0026rdquo; here, dabaq, is interesting:\nIt\u0026rsquo;s the same word used in Genesis 2 about how a man who will leave his parents and \u0026ldquo;cling to his wife\u0026rdquo; with the two becoming one. It\u0026rsquo;s also used for something that \u0026ldquo;sticks\u0026rdquo; to you like glue, just like stains on your hands or your tongue to the roof of your mouth. But it\u0026rsquo;s not passive: The Philistine army \u0026ldquo;sticks to the heels\u0026rdquo; of the Israelites, and Ruth is also told to \u0026ldquo;stick to the maids\u0026rdquo; of Boaz. This kind of \u0026ldquo;clinging\u0026rdquo; is the action of attaching yourself to someone and therefore being very close to that person, up to intimacy, and by being that close, automatically following them. For me, this is the kind of \u0026ldquo;glueing myself\u0026rdquo; to Jesus that I want to live more every day, just like David says in Psalm 63:\nMy soul clings to You; Your right hand upholds me.\nIf we not only draw near to Him from time to time but instead live with Him and stick to His heels, obedience to His words and conformance to His loving character will follow as a natural fruit, just like we read in 2 Corinthians 3:18:\nWe all, as we contemplate the Lord\u0026rsquo;s glory with unveiled faces, are being transformed into His image with ever-increasing glory. This transformation comes from the Lord, who is the Spirit.\nThe Shortsightedness Of All The Others Elimelech only saw a famine and tried to secure physical survival for his family by moving to Moab ‚Äî tragically, he and his sons died in spite of his best intentions.\nNaomi only sees her loss ‚Äî although she later recognizes and praises God\u0026rsquo;s hand moving in favor of her and Ruth.\nThe nameless \u0026ldquo;closer redeemer\u0026rdquo; only sees his own possession and tries to secure his family\u0026rsquo;s inheritance and prosperity by relying on his riches.\nBut Ruth and Boaz see something far greater. Their eyes are on God first.\nRuth seems to have no problem in trusting God to completely take care of her in a foreign country with (from a human perspective) the outlook of a dim, impoverished existence at the margins of society. She does not feverishly spring into action nor does she just sit back and do nothing. Out of her trust in God, she faithfully gathers grain for her mother-in-law and herself throughout every working day, all day long, all the months of the harvest. And it\u0026rsquo;s only when Naomi suggests Ruth approach Boaz about the redeemer thing that she does it instead of doing it on her own account.\nBoaz does not venture on frantically either: He understood all along that God was moving here and that he could fully trust Him to bring everything together at the right time. When Ruth asks him to redeem them, he is not even afraid of the \u0026ldquo;closer redeemer\u0026rdquo;.\nThey both see God is at work in everything: In the famine, in the deaths of Ruth\u0026rsquo;s husband and other family men, in the whole harvest season, in the redemption story ‚Äî and even beyond what they are going to see with their own eyes! They see God at work and willingly intertwine their actions with God\u0026rsquo;s movements.\nAnd Boaz does not even \u0026ldquo;endanger his family inheritance\u0026rdquo; like the \u0026ldquo;closer redeemer\u0026rdquo; feared. He gets something far, far better: A place in the family line of King David and ultimately Jesus, the Son of Man and Son of God. Now that is a family inheritance!\n","date":"2022-08-28T16:57:34+02:00","permalink":"https://jscheytt.github.io/p/ruth-and-boaz-are-interlocking-with-gods-action/","title":"Ruth and Boaz are Interlocking With God's Action"},{"content":"FluxCD was my first love in the GitOps space. I worked with it when it was still v1, had no chance to use, and since about a year I returned to using it in its glorious, rewritten v2.\nI haven\u0026rsquo;t given ArgoCD a try so far until this week somebody suggested trying out ArgoCD Autopilot. The process was super smooth and in less than 10 minutes I had a running ArgoCD dashboard in my local minikube cluster.\nAnd holy moly I have to say: ArgoCD is awesome! In the less than one hour I have seen it close up now, I already see so many possibilities that are hard to do when you try to scale Flux:\nHaving a UI at all Managing applications in multiple clusters from 1 Git repo with explicit assignment to these clusters The UI is basically the better Default Kubernetes Dashboard but for GitOps: The Kubernetes Dashboard gives you a very \u0026ldquo;relational\u0026rdquo; view of your resources, much like k9s does (albeit with fewer resource types). I tried Kubevious in some projects because it allows you to view related resources hierarchically together. But it is pretty buggy (especially the mysql DB deployed with it) and has not fulfilled its promise for me. Additionally, it\u0026rsquo;s read-only and does not show you a Events or container logs. ArgoCD however gives us the best of both worlds: Related resources are shown hierarchically (e.g. Deployments create ReplicaSets create Pods). You can even group them into Apps, ApplicationSets, and Projects. If you open a Resource (e.g. Pod), you can see its Events and also its logs! Preview Environments seem relatively straightforward. I have heard many rumors that Progressive Delivery is easier with ArgoCD (or at least involves less manually scripted yaml generation pipelines). As a Cloud Automation Engineer, one of my main missions is to deliver stable apps. And this highly involves stable processes for my team. ArgoCD feels like the perfect fit: I can deploy my apps with ArgoCD and everybody with access to it can debug resources, see which versions are currently deployed, and maybe even promote apps to the next environment!\nThere also seem to be use cases (probably especially in a setup with separate platform and app dev teams) where deploying FluxCD and ArgoCD together makes sense. But I am definitively going to give ArgoCD a shot in some important environment soon.\n","date":"2022-08-25T15:00:09+02:00","permalink":"https://jscheytt.github.io/p/argocd-is-like-the-kubernetes-dashboard-but-for-gitops/","title":"ArgoCD is like the Kubernetes Dashboard but for GitOps"},{"content":"About 2 years ago I decided to start reading the Old Testament in the reading order of the Tanakh, the Hebrew bible. Recently, I came across the book of Job. This was one among the many books in the Bible I found hard to read or make sense of.\nBut as part of my journey into rediscovering the abundant yet hidden life in Him even all the seemingly strange books of the Old Testament start lighting up. Let\u0026rsquo;s keep in mind that Jesus, the Son of God, was announced by John as \u0026ldquo;the Word\u0026rdquo; Himself. What this encompasses for me is that whenever you read the Scriptures ‚Äî fittingly called God\u0026rsquo;s Word ‚Äî you are reading Jesus. So when we read the Scriptures with the mindset of young Samuel in the temple, saying \u0026ldquo;Speak Lord, Your servant is listening,\u0026rdquo; and staying on the lookout for Jesus we can surely expect to find Him anywhere in Scripture!\nAnd thus, the book of Job started lighting up for me as a story about how to treat one another in suffering according to Jesus\u0026rsquo; heart and the prayerful community of love (see Chapter 7 of \u0026ldquo;The Divine Conspiracy\u0026rdquo;). It illustrates what a Kingdom way of treating each other in bad times looks like and shows how to truly love a friend who is suffering a great loss.\nWhat The Three Friends Get Right When Job\u0026rsquo;s three friends hear about their friends great misfortune, they set out to find him, not leaving him alone. When they find him, they cry out in desperation. They sit down with him and share his fate ‚Äî down in the dust, in the solitude, in the sickness.\nWe read they even stay with him in silence and fasting 7 days and nights. They don\u0026rsquo;t start by saying anything, they start by making themselves one with Job in his suffering, experiencing and feeling the same pain. When the conversation starts, they don\u0026rsquo;t start giving wonderful advice on their own. They let Job begin by sharing his heart.\nWhere They Go Wrong They are not truthful. Just like Job, neither of them effectively knows why the trouble and loss came. But the three friends act as if they knew!\nThey try to justify God\u0026rsquo;s actions, speaking on His behalf motivated by fear. As if the Great One had any need for small humans hastily jumping to His defense! Of course God loves it when we honor Him and live out a deep reverence towards Him. But we cannot force others to do so. And more importantly, doing anything in our lives out of fear instead of trust is effectively sin.\nThey say tons of \u0026ldquo;right\u0026rdquo; things ‚Äî but also out of fear, not out of faith: Each of them in their own way proclaims God\u0026rsquo;s faithfulness and loyalty towards the ones who stick to Him. One of them even prophecies that God will reward Job back with double what he lost ‚Äî and at the end of the story this is even 100 % fulfilled! But their hearts are not right: They just try to stand on the right side of the argument instead of loving their friend by being honest.\nThe end of the story teaches us that you can say any amount of factually correct things that are legitimately right ‚Äî but if your heart is not right, God will outright reject it! In the final chapter of the book, He even goes so far as saying:\nI am angry with you and your two friends, because you have not spoken the truth about me, as my servant Job has!\nPonder this for a moment: Job\u0026rsquo;s speeches are partially inconsistent, even contradictory about what God does or what God\u0026rsquo;s character is like. But for God it is Job in his truthfulness who speaks the truth instead of his friends who emit true facts without truthfulness, not speaking from a place of vulnerable honesty. This is what we also clearly see in Psalm 51 where David remarks that God \u0026ldquo;delights in truth in the inward being\u0026rdquo;.\nIt\u0026rsquo;s About Where God Is Speaking And then the fourth friend appears: Elihu. He speaks from a point outside of the spectrum of Job and his friends. He is not trying to position himself somewhere along the lines of \u0026ldquo;God is always just\u0026rdquo; or \u0026ldquo;Job has never done any wrong\u0026rdquo;. Instead He finds the \u0026ldquo;third way\u0026rdquo; beyond their perspective, which is ultimately a perspective of extreme distance to God:\nHe approaches Job in a resolute yet loving manner. He talks to both sides about their rights and wrongs. And he emphasizes the point that this situation (and ultimately, all our lives) is not about who is right or wrong: It\u0026rsquo;s about God speaking to us through all of life\u0026rsquo;s circumstances and events.\nWe see the same pattern in John 9 with Jesus and His disciples when they walk past a man who was born blind: The disciples ask Jesus:\nWho has done wrong that this man is suffering so much, his parents or he himself?\nBut then Jesus rightfully asks:\nWait a second ‚Äî how did the idea enter your minds that this situation is about who sinned when and how? All this trouble is a way for God to show His glory!\nAnd then He goes ahead, heals him and we truly see how \u0026ldquo;the works of God are displayed in him\u0026rdquo;.\nWe see that Job\u0026rsquo;s loss, the blindness and poverty of the blindborn, and the messes which are our own lifes are all about God constantly speaking to us, wanting to reach His goal of deep connection with us. My life is not about myself anymore but about learning to discern where God is working and speaking ‚Äî and trusting that He is infinitely good.\n","date":"2022-08-22T20:27:09+02:00","permalink":"https://jscheytt.github.io/p/job-and-truth-in-the-innermost/","title":"Job and Truth in the Innermost"},{"content":"How can our lives really change? How can we actually become good (and not only talk about being good)? Is deep transformation of our characters on this side of eternity even possible?\nI was raised Charismatic/Pentecostal-Christian but the majority of my life often did not exhibit Christlikeness or actual trust in The One. But in the last 3 years, there were two things that have deeply affected my live and changed my priorities and my heart:\nBeing in a small group in our church with a shared focus and goal of following Jesus and practicing His presence and His teachings Reading the book \u0026ldquo;The Divine Conspiracy\u0026rdquo; by Dallas Willard (and listening to sermons about topics of the book) Much has been said about the striking outward similarity of the daily lives of professing Christians and non-Christians ‚Äî and how we should actually expect to see something very different when we lead a life in accordance with God. Sadly, none of this has ever helped me to a) identify the many areas in my life where I effectively did not place my reliance upon Jesus and b) learn to put my trust in Jesus. What this book did for me ‚Äî more than anything else ‚Äî was to describe the beauty of God Himself, how well He has crafted this world in which we live, and what an extraordinary kind of life He has meant for us humans: a life in constant connectedness with Him, living out the life He would lead if He would live it here and now.\nFrom my experience, this book is capable of producing faith in Jesus by displaying Him as the all-competent Master of Life which He really is. The core of the book (about two thirds) revolve around the Sermon on the Mount, the longest speech and the Master Lecture of Jesus. These core teachings given by the Son of God never made sense to me in its entirety until I read the interpretations given by Dallas Willard.\nOne word of caution: The first 50 to 100 pages are not that easy to read. On my first try at reading this book I stopped after about 50 pages because it felt too dry and it was not yet becoming clear what point Dallas Willard was trying to drive home. But if you give him the benefit of the doubt you will get to the gold ‚Äî that is, to discovering Jesus and the abundant life that He has and is for everyone who puts their complete trust in Him.\nOne wonderful piece of news is that since a few months a translation in German has become available. That has made it even more accessible for me, even though I read and write a sizable portion of my working day in English!\n","date":"2022-08-15T18:24:33+02:00","image":"https://vhx.imgix.net/studygateway/assets/7df85841-6e5b-4ba7-8e58-4563785d7aa6-0fcda344.jpg","permalink":"https://jscheytt.github.io/p/rediscovering-our-hidden-life-in-god/","title":"Rediscovering Our Hidden Life In God"},{"content":"Most of my Makefiles nowadays start with the following stuff at the top of Makefile:\n# Remove default suffixes as we don\u0026#39;t use them. .SUFFIXES: # Set the Shell to Bash always to avoid surprises. SHELL := /bin/bash # Auto-generate help texts from end-of-line comments. # See https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html .PHONY: help USAGE_TEXT := Usage: make [make-options] \u0026lt;target\u0026gt; [options] HELPTEXT_HEADING := Common Targets: help: ## Show this help info. @printf \u0026#34;$(USAGE_TEXT)\\n\u0026#34; @for makefile in $(MAKEFILE_LIST); do \\ echo; \\ grep \u0026#39;^HELPTEXT_HEADING := \u0026#39; \u0026#34;$$makefile\u0026#34; | sed -E \u0026#39;s#.* := (.*)#\\1#\u0026#39;; \\ grep -E \u0026#39;^[a-zA-Z_\\.-]+:.*?## .*$$\u0026#39; \u0026#34;$$makefile\u0026#34; | sort | \\ awk \u0026#39;BEGIN {FS = \u0026#34;:.*?## \u0026#34;}; {printf \u0026#34; %-27s %s\\n\u0026#34;, $$1, $$2}\u0026#39;; \\ done # Split out Make modules into `helpers/`. -include helpers/*.mk helpers/**/*.mk Then I extend this either with targets directly in the Makefile or, mostly later on, with separate .mk files in the helpers/ directory.\nIf I want to mark a target \u0026ldquo;public\u0026rdquo; or document its usage, I will just append ## Usage. to the end of the target\u0026rsquo;s line. One example:\nbootstrap: cluster.local ## Bootstrap base resources. Required parameters: cluster_name. ","date":"2022-06-01T15:04:45+02:00","permalink":"https://jscheytt.github.io/p/my-default-makefile-boilerplate-code/","title":"My default Makefile Boilerplate code"},{"content":"\nThis week I went to KubeCon/CloudNativeCon in Valencia, Spain, together with four of my colleagues, both from mimacom Germany and mimacom Spain.\nThanks a lot to mimacom for sponsoring our attending!\nWhat I want to talk about in this blog post is not a summary of talks or topics but just how I experienced the whole event. Is was the first KubeCon I have ever attended, and we came on Monday, left on Friday, so we effectively only attended Tuesday through Thursday (the middle 3 of the 5 days).\nAbout KubeCon KubeCon is the regular conference for all things Kubernetes and everything happening in the Cloud Native space. Since the last few years, it has been held 2 times a year, always alternating between Europe and North America.\nIt is massive. Really massive. Imagine the biggest fair venue you know of, maybe double that area, and then fill it (and the surrounding city) with more than 6,000 developers - that\u0026rsquo;s how massive it is.\nBut this mass of people only comes from day 3 to day 5 (Wednesday through Friday). On the first two days it is a lot less crowded because that is the time where the so called \u0026ldquo;Co-located Events\u0026rdquo; take place. These are smaller sub-conferences within KubeCon which focus on a specific topic. Some of these events this time were: Service Mesh Con, Cloud Native Security Con, Kubernetes on Edge Day, and GitOpsCon. (I think there were about 15 distinct events in total.)\nDisclaimers To be completely honest up-front, GitOpsCon was the main reason I wanted to attend KubeCon at all in the first place, so my view on KubeCon as a whole is biased.\nAdditionally, I am the type of person who easily gets overwhelmed when staying in very crowded places for longer periods of time. I can handle it, but not without proper self-care and not very well for multiple days in a row. This does, admittedly, not put me in a very well-equipped position for a fair like this - just wanted to mention this so you know which color the glasses have through which you now get a view unto this event üòâ.\nGitOpsCon One lesson I have drawn from my first KubeCon is that the Co-located Events are the real thing. That, of course, only applies if there is a Co-located Event in which you have a deep interest üòâ.\nMy heart beats for GitOps and its much wider adoption, so I attended GitOpsCon, which is organized by OpenGitOps (or the GitOps Working Group (WG), which is sort of the official committee behind it). GitOpsCon was one of the bigger Co-located Events and even offered multiple talks in parallel during some slots.\nOne person I was very much looking forward to meeting was Chris Short from AWS EKS (formerly RedHat). If you have not heard of him before, do check out his newsletter DevOps\u0026rsquo;ish! It is one of the three weekly newsletters I regularly read, and I do read very few.\nAnd \u0026hellip; it worked out! He was holding the first keynote together with Dan Garfield (from Codefresh, ArgoCD maintainer) and Scott Rigby (from Weaveworks, both a Helm and a FluxCD maintainer), and I was able to just walk up to him in the time between two sessions and express my gratitude for his curating that newsletter ü§ó!\nThere were very interesting talks, but sometimes it\u0026rsquo;s funny how the things that stick with you after a talk are not what the talk was actually all about. I was for instance sitting in a talk by Michael Irwin about creating a platform for campus students to run workloads in Kubernetes, but what the talk really did for me was losing my fair of Helm - simply because of the fast and uncomplicated way he ran helm create during a demo in that talk.\nWhat was especially rewarding, engaging, and exciting was getting into conversation with the speakers after their talks. I am convinced it really makes a huge difference that the barrier to asking is so low when you are together in one room in-person. Sometimes you can easily get clarifications on unclear points, sometimes you discover together that something is not yet known for both of you, sometimes you discuss about the industry as a whole and in which direction it evolves or should evolve. One speaker (Andrew Block from RedHat, he talked about Secrets Management with GitOps) even photographed my badge in order to contact me after the event because he could not yet answer a detail question I had! I am deeply grateful for the opportunity of diving into the community of people in the Cloud Native space.\nNew Ideas Luckily, not only GitOpsCon exposed me to new ideas - that also happened (and happened a lot!) with the talks during the other two days: I heard about the Kernel-intercepting eBPF technology, something like \u0026ldquo;Serverless CloudFoundry\u0026rdquo; with Knative, and using machine learning to optimize resource requests and limits for SLOs, among many others. If you want to see which (few) talks I attended, see my schedule in Sched.\nThe cool thing with something like Kubernetes and its ecosystem is that you can very quickly experiment without a big setup investment. I e.g. heard about Tekton as a side note and decided to directly give it a go during one of the other talks, and I was directly able to walk through the Getting Started guide to verify how nicely it works!\nStarting To See Patterns Let me note down a few things I found remarkable and where we as an industry can maybe find better ways of achieving things:\nNot only do we have many tools in the Cloud Native ecosystem (I will not make the next joke about the CNCF Landscape, you can invent one yourself üòÑ), it also seems to me that everybody starts to create another copy-paste version of the standard Kubernetes Dashboard but just filtered down to their CRDs. The Tekton Dashboard is a prime example of this, but they are not the only ones who are either actively doing this or considering building their own UI. The Kubernetes Dashboard seems to have a plugin system, so why don\u0026rsquo;t we all use more of this? I have never used ArgoCD because I thought \u0026ldquo;well, I have learned how to use FluxCD and use it, why should I learn another CD tool?\u0026rdquo; And like many people, I have been living in a false dichotomy that GitOps is either Flux or Argo - but that misses the point! One talk at GitOpsCon showed pretty nicely how you can use both together: Use FluxCD as a platform team to deploy your infrastructure, and deploy Argo for your developers to deploy and manage their applications. Just one example: I love Flux, but managing preview environments from PRs is a lot of work (mostly YAML generation), but Argo has a dedicated Pull Request Generator to solve this in just about 10 lines of code. Meeting Maintainers If you go to KubeCon only for the talks, you are probably doing it wrong - watch the talks virtually, it is a lot less effort. There is a whole big area with booths from all kinds of vendors in the Cloud Native space. One corner of this space is reserved for maintainers of a few Open Source tools.\nI especially enjoyed going up to these people and more than anything thanking them for the tremendous work they are doing and how grateful I am for getting to work with these tools (almost) every day! Among these there were especially FluxCD and Crossplane, but also the often overlooked cert-manager.\nThe folks at the cert-manager booth were especially creative in creating an actual SSL certificate for your email address and then printing and even stamping it with a wax seal! Btw do go and check out their short survey about usage in production clusters to enable them to become a graduated CNCF project.\nSome of the tools represented in the maintainers\u0026rsquo; area were still somewhat new to me. The great thing was that I could just walk up to them and ask them for a short demo to understand the usage and the difference to other tools. Special thanks to the folks at the ArgoCD, Backstage, and Buildpacks booths!\nFavorite Quotes I am going to close with some wise words people have said on this conference:\nIf it\u0026rsquo;s not in Git, it\u0026rsquo;s just a rumor.\nRedHat printed T-shirts for GitOpsCon with this saying - they were gone quicker than you could queue in at their booth (I did not get one unfortunately \u0026hellip;).\nWhat is software? Software is code while it is running, code with electricity applied to it.\nJustin Garrison in the context of \u0026ldquo;Infrastructure as Software\u0026rdquo; and why GitOps is such a breakthrough for this.\nKubernetes is the industrial revolution for server computing, that\u0026rsquo;s how fundamental it is.\nLucas K√§ldstr√∂m in his talk \u0026ldquo;Understanding Kubernetes Through Real-World Penomena\u0026rdquo; (very recommended!).\n","date":"2022-05-20T12:23:53+02:00","image":"https://events.linuxfoundation.org/wp-content/uploads/2022/03/kubecon-eu-2022-web-021621_snackable.jpg","permalink":"https://jscheytt.github.io/p/my-first-kubecon/cloudnativecon-experience/","title":"My First KubeCon/CloudNativeCon Experience"},{"content":"Psalm 45 celebrates a royal wedding. The first part addresses the groom and the second addresses (mostly) the bride. I am focussing on this second part verses 10 through 17, and I interpret it in one of the ways I see very much fit: With the groom being both God the Father and God the Son, and the church as His bride.\nESV/NIV Interpretation Hear, O daughter, and consider, and incline your ear Zone in on me with all your attention, my daughter Forget your people and your father‚Äôs house Leave behind what has given you earthly security by trusting in flesh And the king will desire your beauty I look at you with eyes of love; you are so beautiful and I, your Bridegroom, desire you Since he is your lord, bow to him Surrender yourself to Me completely with your whole life The city of Tyre will come with a gift Then you will gain so much more than what you left behind: You are showered with gifts in My proximity and will no longer live in poverty People of wealth will seek your favour You are no longer the Deserted Wife but the Desired One All glorious is the princess within her chamber To your own joy you discover ever more the beauty with which I made you Her gown is interwoven with gold Even outsiders marvel at your beauty and praise Me for it In embroidered garments she is led to the king I draw you ever closer to Me, your King Her virgin companions follow her ‚Äì those brought to be with her You will not stay alone in this: You gain real companions who journey towards the King together with you With joy and gladness they are led along In your devotion to Me you experience overflowing joy and rejoicing As they enter the palace of the king Your home is with Me In place of your fathers shall be your sons Your life is made fertile and provides a space for others to grow You will make them princes in all the earth Through the unfolding of My life in yours, your sons and daughters will exercise their responsibility in this world and reign in My Kingdom I will cause your name to be remembered in all generations People in all nations will see this Therefore nations will praise you forever and ever And they will praise the Father, the Son, and the Spirit throughout all eternity ","date":"2022-04-13T18:04:52+02:00","permalink":"https://jscheytt.github.io/p/an-interpretation-of-psalm-45/","title":"An Interpretation of Psalm 45"},{"content":"I have a dotfiles repository for setting up my MacOS machine easily and reproducibly. For this I am mostly using Ansible, just slightly wrapping it with Make and seasoning it with a pinch of Shell.\nThe core piece of this repository is a Brewfile and a collection of Shell aliases and functions. I don\u0026rsquo;t regularly run the Ansible playbook itself because I created it for initially setting up a machine. The only thing I run very frequently is the upgrade command which includes persisting new Brew formulae to the Brewfile.\nAt the same time I have come to love applying GitOps principles to everything I work with. Just the other day I was moving some commands (in the vein of \u0026ldquo;global Git pull\u0026rdquo;) out of said upgrade command into a cronjob.\nAnd then it hit me: If I create a cronjob for running my Ansible playbook through the playbook itself, I have GitOps-like reconciliation!\nLet\u0026rsquo;s do it in just a few lines of yaml:\n- name: Ensure dotfiles are applied cron: name: Ensure dotfiles are applied minute: \u0026#34;0\u0026#34; hour: \u0026#34;9\u0026#34; weekday: \u0026#34;1-5\u0026#34; # on workdays job: make -f \u0026#34;{{ ansible_env.PWD }}\u0026#34;/Makefile build ","date":"2022-03-01T08:34:20+01:00","permalink":"https://jscheytt.github.io/p/you-can-gitopsify-your-ansible/","title":"You can Gitopsify your Ansible"},{"content":"Recently I wanted to do a bulk cleanup on some GitHub repositories I am responsible for, deleting old branches that have already been merged into the default branches. I first considered performing it through the GitHub API, but then I decided to try doing it via Git itself.\nAfter I had begun dabbling with a few wrapper scripts, I suddenly remembered something which massively simplified my strategy: Git Aliases. These are Git commands you can define yourself, either via CLI or in the Gitconfig file.\nWith this article, I want to introduce what I learned about Git aliases ‚Äì and in the process, you get all the aliases I defined for my cleanup üòâ\nDefining Shortcuts Many articles about Git aliases explain only the shortcut side. They show e.g. how you can abbreviate git checkout to git co by running git config --global alias.co checkout. Alternatively to the CLI command, you can add this section to your ~/.gitconfig file:\n[alias] co = checkout Nowadays, with the Git plugin of oh-my-zsh, I don\u0026rsquo;t feel there is a great need for such shortcuts. Let\u0026rsquo;s instead talk about actual custom commands:\nWith Parameters If you use an exclamation mark before your command, you can run any Shell command you want, even with parameters. The following example will let you do e.g. git cat 2eea778 package.json to get the file contents of a file at a certain revision:\n[alias] ; Output file contents from any revision ; See https://stackoverflow.com/a/54819889/6435726 cat = !git show \u0026#34;$1:$2\u0026#34; Pass It On Piping output into other commands is available out of the box. Executing multiple commands is just a \u0026amp;\u0026amp; away.\nYou may want to break your command into multiple lines: Do so by wrapping your command into quotes and prepending every new line with a backslash.\n; What is the default branch of this repo? ; The first command asks the remote if the default branch was changed. default-branch = \u0026#34;! \\ git remote set-head origin -a \u0026gt; /dev/null \\ \u0026amp;\u0026amp; git rev-parse --abbrev-ref origin/HEAD \\ | sed \u0026#39;s#origin/##\u0026#39;\u0026#34; You can also use subshells:\n; Switch to the default branch. switch-default = !git switch $(git default-branch) Escaping Can Be Tricky If you want to have a literal backslash in the resulting Shell command, you have to escape it. Pay attention to the grep patterns in the following aliases: Every double backslash of this pattern becomes a single backslash when Git passes the command to the Shell.\n; Which branches have been merged into the default branch on the remote? ; For safety, manually add names of long-lived branches to the grep pattern. remotely-merged-branches = \u0026#34;! \\ git branch --all --merged $(git default-branch) \\ | { grep -vE \u0026#39;^\\\\*|(\\\\b($(git default-branch)|develop|main|master|quality)\\\\b)\u0026#39; || true; } \\ | sed \u0026#39;s#remotes/origin/##\u0026#39;\u0026#34; ; Which local branches are not present on the remote (but were once)? ; NOTE: `git remote prune origin` only deletes local snapshots ; of remote branches that were deleted on the remote. ; See https://stackoverflow.com/a/48820687/6435726 ; It will not delete local branches where the remote branch is \u0026#34;gone\u0026#34;. ; This command finds these local branches. local-branches-without-remote = \u0026#34;! \\ git remote prune origin \u0026amp;\u0026amp; \\ git branch --list --format \u0026#39;%(if:equals=[gone])%(upstream:track)%(then)%(refname)%(end)\u0026#39; \\ | awk NF \\ | sed \u0026#39;s#refs/heads/##\u0026#39;\u0026#34; I think these are the dangers of every templating language: You have to account for special characters - but if these special characters happen to be special in someone else\u0026rsquo;s language, things can become unexpectedly complicated. (Think about Makefiles and $(variables) vs. $$variables in rules.)\nParameters Pt. 2: Default Values As with any other Shell function, you can not only have positional parameters but you can also give them default values. The following alias has a delete flag that defaults to the safe behavior, but you can overwrite it with git delete-local-branches-without-remote -D:\n; Delete local branches that are not present on the remote ; (safely, including warnings). ; You can ignore the warnings by passing \u0026#34;-D\u0026#34; as a parameter. ; NOTE: `git remote prune origin` only deletes local snapshots ; of remote branches that were deleted on the remote. ; It will not delete local branches where the remote branch is \u0026#34;gone\u0026#34;. delete-local-branches-without-remote = \u0026#34;! \\ git local-branches-without-remote \\ | xargs -I {} git branch ${1:-\u0026#39;-d\u0026#39;} {}\u0026#34; This last alias is what finally deletes the remote branches I wanted to target. It also demonstrates nicely how you can use xargs to run every Shell command as if it was capable of handling stdin natively:\n; Delete branches on the remote which were merged. push-delete-remotely-merged-branches = \u0026#34;! \\ git switch-default \u0026amp;\u0026amp; \\ git remotely-merged-branches \\ | xargs -I {} git push origin --delete {}\u0026#34; Debugging If you encounter an error message, you can increase the verbosity with this environment variable:\nexport GIT_TRACE=1 Deactivate it afterward by closing your terminal session or explicitly with unset GIT_TRACE.\nBringing It All Together: Multiple Repositories As a developer, chances are high you have more than just one Git repository on your machine. For many everyday use cases (like keeping all your local clones up-to-date), I have been using git-repo-updater with a lot of success and ease.\nBut now I discovered I can use it to execute arbitrary commands (and also Git aliases üòâ) in multiple Git repos. With the following Shell function I am wrapping gitup for convenience:\n# Execute a Git command on all Git repositories # $1: Path with Git repositories in subdirectories # Rest of parameters: Git command (e.g. \u0026#34;status\u0026#34;) function git-xargs() { local filepath=\u0026#34;$1\u0026#34; # shellcheck disable=SC2116 gitup --depth -1 \u0026#34;$filepath\u0026#34; --exec \u0026#34;git $(echo \u0026#34;${@:2}\u0026#34;)\u0026#34; } And now I can finally clean up all branches with just one command (and quite pretty output):\ngit-xargs ~/Documents push-delete-remotely-merged-branches git-xargs ~/Documents delete-local-branches-without-remote ","date":"2022-02-28T13:15:29+01:00","permalink":"https://jscheytt.github.io/p/the-git-commands-you-wish-you-always-had/","title":"The Git Commands You Wish You Always Had"},{"content":"$ kubectl explain statefulset KIND: StatefulSet VERSION: apps/v1 DESCRIPTION: StatefulSet represents a set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity. FIELDS: apiVersion\t\u0026lt;string\u0026gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources kind\t\u0026lt;string\u0026gt; Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds metadata\t\u0026lt;Object\u0026gt; spec\t\u0026lt;Object\u0026gt; Spec defines the desired identities of pods in this set. status\t\u0026lt;Object\u0026gt; Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time. I guess this will reduce a lot of my googling in future.\nAnd it even works on nested fields!\n$ kubectl explain deployment.spec.template.spec.containers KIND: Deployment VERSION: apps/v1 RESOURCE: containers \u0026lt;[]Object\u0026gt; DESCRIPTION: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. A single application container that you want to run within a pod. FIELDS: args\t\u0026lt;[]string\u0026gt; Arguments to the entrypoint. The docker image\u0026#39;s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\u0026#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell command\t\u0026lt;[]string\u0026gt; Entrypoint array. Not executed within a shell. The docker image\u0026#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\u0026#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell env\t\u0026lt;[]Object\u0026gt; List of environment variables to set in the container. Cannot be updated. ... ","date":"2022-02-01T14:53:18+01:00","permalink":"https://jscheytt.github.io/p/kubectl-can-explain-all-resource-types-in-detail/","title":"kubectl can explain all resource types in detail"},{"content":"Today I was refactoring a bigger configuration setup that is built with kustomize. I see kustomize as a light-weight way of packaging multiple Kubernetes manifests, together with a little bit of logic.\nThe base kustomization of the application config repo I was refactoring looked something like this:\napiVersion: kustomize.config.k8s.io/v1beta1 kind: Kustomization resources: - manifests/cronjob-backup.yaml - manifests/deployment.yaml - manifests/ingress.yaml - manifests/pod-disruption-budget.yaml - manifests/service.yaml commonAnnotations: source: java tenant: acme configMapGenerator: - name: acme-app-config files: - configs/10-local.properties - configs/30-local.properties - configs/40-local.properties I have an almost pathologic tendency to simplify and DRY everything up that I find, especially in configuration code. And as I saw a lot of repeating Labels in the manifests, I thought \u0026ldquo;Well, let\u0026rsquo;s just unify them.\u0026rdquo;\nSo I went ahead, removed the repetitive Labels from the manifests and added the following block to the kustomization:\ncommonLabels: app: acme-app I knew a bit about Kubernetes Services and that they use Labels to find the Pods to which they should direct their traffic. That\u0026rsquo;s why I thoroughly verified that after my change the Service and the Deployment would still have the same selector labels. ü§ó Nothing seemed off \u0026hellip;\nI committed and pushed my changes, and after the Deployment had finished restarting, I clicked through the application. üëÄ Oddly enough some of the requests succeeded as expected, but some kept failing with a üí• 502 Bad Gateway error! At first I tried troubleshooting quickly, but soon I opted for just reverting my changes and pushing the revert commits to undo my changes.\nFor debugging I compared the output of kustomize build before and after my changes. After some scrolling I came across the CronJobs I defined for backup1.\nI should probably not have been surprised that the CronJob also had the same Labels I gave it via the kustomization. But now a suspicion started sneaking in:\nWhat if the completed Pods of the CronJob received traffic from the Service because they had the same Labels?\nFollowing this idea, I refactored my configs a bit. Soon, I was able to ensure that requests to the Service would only point to my target Deployment (and not to any other Pods):\ndiff --git a/base/kustomization.yaml b/base/kustomization.yaml index 6c1c6f7..b77b0fc 100644 --- a/base/kustomization.yaml +++ b/base/kustomization.yaml @@ -15,7 +15,6 @@ commonAnnotations: source: java tenant: acme -commonLabels: - app: acme-app configMapGenerator: - name: acme-app-config diff --git a/base/manifests/deployment.yaml b/base/manifests/deployment.yaml index 1e4aa3f..a60a798 100644 --- a/base/manifests/deployment.yaml +++ b/base/manifests/deployment.yaml @@ -16,6 +16,9 @@ metadata: spec: replicas: 1 + selector: + matchLabels: + app: acme-app template: metadata: labels: + app: acme-app spec: containers: diff --git a/base/manifests/service.yaml b/base/manifests/service.yaml index b05d898..89af021 100644 --- a/base/manifests/service.yaml +++ b/base/manifests/service.yaml @@ -10,3 +10,5 @@ spec: - name: api port: 8080 + selector: + app: acme-app (Notice that the Deployment needs the Label both in .spec.selector.matchLabels and .spec.template.metadata.labels!)\nAnd surely enough, after deploying this fix, the request to the application worked flawlessly üòä‚úÖ.\nIt does not matter for which purpose I created this CronJob, it could have been any Kubernetes Resource that creates Pods.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2021-12-03T10:43:01+01:00","permalink":"https://jscheytt.github.io/p/trying-to-simplify-k8s-labels-can-be-dangerous-for-your-routing/","title":"Trying to simplify k8s labels can be dangerous for your routing"},{"content":"What can we compare the size of the universe to? I was recently starting to wonder about the size of the universe. It\u0026rsquo;s not like I thought I could really get down to imagining this kind of gargantuan extent. But I wanted to find a good analogy, so here it goes:\nImagine the distance furthest distance humans will soon travel: the distance from Earth to Mars. If you are lucky with planning, the shortest route takes almost an entire year (9 months) in a spaceship.\nNow let\u0026rsquo;s compare this distance to the size of the observable universe. The ratio between these two distances is in the order of $10^{16}$. That means there are 16 orders of magnitude in difference between these two lengths.\nWhat can we compare this to? Let\u0026rsquo;s scale this down: We will pretend our planet Earth is the universe. Now imagine we wanted to drill a hole through the whole planet from one extreme to the other (e.g. from the North Pole to the South Pole).\nIf we had started drilling the equivalent of the Earth-Mars distance, how far would we have gotten? One meter? A millimeter? The width of a human hair?\nIt turns out, we would have only gotten as far as the size of one atom.\nCan we even imagine this at all? For me this only starts to scratch the surface of trying to understand the sheer scale of the universe and the God behind it. The problem with this analogy? It still does not help a lot because I believe we humans cannot even really imagine the distance between Earth and Mars yet.\nOn Earth we comfortably handle thousands, sometimes maybe tens of thousands of kilometers in our brains. On our beautiful planet, this is the order of magnitude we are (gladly) confined to. But the travel from Earth to Mars (i.e. the shortest path) is in the 10s of millions of kilometers. That is three orders of magnitude above what we normally deal with in daily life! (If all the fuss around \u0026ldquo;orders of magnitude\u0026rdquo; sounds foreign to you, maybe the well-known video \u0026ldquo;Powers of Ten\u0026rdquo; can help you out.)\nI will just state a hypothesis: I believe we humans cannot handle more than 12 orders of magnitude. Everything beyond that will just not fit into our brains.\nIn everyday life we normally handle about 10 orders of magnitude in space and time. For space, that is e.g. from 10¬µm ($10^{-5}$ m) (about the width of a hair) to 10,000 km ($10^{5}$ m) (the distance between Barcelona and LA). For time, that is e.g. from 100 ms (a tenth of a second) to 100 years (about $10^{9}$ s).\nIf we stretch our imaginations we can go towards tens of thousands of kilometers (now we reach 12 orders of magnitude), and maybe we can begin to imagine 1,000 years and tens of milliseconds. But I think beyond that we are just lost. If any object is outside of these ranges we need to scale it up or down and compare it to things within this $10^{12}$ scale. But if we try to compare things where their ratio is greater than $10^{12}$, our brains are just to tiny to fit these in.\nHow big is the universe really? Now that we start to find words and numbers to describe the limits of our imagination, I think we start to really become capable of talking about how big the universe really is.\nThe size of the universe is estimated at multiple tens of billions ($10^{10}$) of lightyears. One lightyear is roughly $10^{16}$ m, so the size of our universe is in the ballpark of $10^{26}$. On the other hand, the smallest length that currently fits into our model of the universe is the Planck length at about $10^{-35}$ m. If we add the absolute values of the exponents, we get the so to speak \u0026ldquo;range of existence\u0026rdquo; of our universe:\n$$ 10^{(26+35)} = 10^{61} $$\nThat means our universe exists at about 60 orders of magnitude.\nAs per my above claim, none of us can even begin to imagine this number. Just try it and keep in mind that 1 order of magnitude means multiply or divide by 10. In analogy, 3 orders of magnitude does not mean multiply or divide by 30 but multiply or divide by 1000. That means going from 10 orders of magnitude to 15 means multiplying by 10,000. You can start to see where this is going ‚Äî but I bet none of us will ever by able to fully grasp such sizes.\nThe above numbers are for space only, but (if I understand that correctly) time is analogous because we are basing it on the same measurements, on the same speed of light (for the upper bound), and the same Planck constant (for the lower bound). At the same time, we have to keep in mind that these 60 orders of magnitude come from limited measurements: We were only able to discover them because of the finite speed of light and the current age of the universe, so it is likely that our universe is even bigger.\nOur human imagination cannot even begin to nibble at these sizes. I think our perception is even more logarithmic than linear, so we are already pretty well equipped to perceive and compare these orders of magnitude ‚Äî our range is just ever so narrow.\nAn artistic rendition of our universe, drawn at a logarithmic scale with our Sun at the center\nHow do we fit into all this? I have another number with me, a very simple one: 5 percent. Or, in other words, 0.05. (Or $5\\cdot10^{-2}$ if you like üòâ.)\nThis is a rough estimation on the amount of actual matter in the universe. When looking at the size and distribution of mass and energy in our universe, then typical baryonic matter makes up less than 5 percent of it.\nSavor that slowly: You and me, animals, atoms, the planets, the stars, even all the galaxies, all these account for not even one twentieth of the universe! And the rest of it is not even empty: The universe is said to be filled by Dark Energy and Dark Matter. (If I could recoin them I would choose the names Invisible Matter and Invisible Energy.)\nOf course this makes one feel very small as a human. The crazy thing is: The God who made all this (all matter visible and invisible), the loving Creator of The Heavens and The Earth, the one who is even bigger than 60 orders of magnitude, chose to reduce Himself drastically.\nImagine this: He created a universe full of wonderful stuff on which most humans will never even lay eyes on (and still they have a right to exist because He rejoices in them!), formed an inhabitable planet with healthy conditions for living, brought all kinds of nature and animals into existence ‚Äî and then He started making humans in His own likeness. Hybrid beings, half dust, half Holy Breath, with their own will and therefore a capability to desire and love Him back.\nBut He did not stop there: Because He wanted to subvert all evil in this world with good, He wanted to show us His character and His way of living in the most direct way possible. So He ‚Äî became one of us. The Uncreated and Eternal One laid aside all His privileges and folded up Himself, down to a miniscule body of atoms and molecules to live and breathe on this very planet.\nAnd not only that: Although nobobdy even recognized Him (at least in public), He decided to let the verdict for all our betrayal against Him and one another fall upon Himself ‚úùÔ∏è. And in Him the eternal life that He joyfully lives together with His Father, became available to us ‚Äî to everyone who puts their complete trust in the Son.\nSo that is what you look at when you contemplate the universe: The Perfect Father in all His overflowing beauty and richness and complexity ‚Äî and at the same time His Son, Jesus, the One who made this loving God visible and touchable for us small humans ‚ù§Ô∏è.\n","date":"2021-11-11T08:18:44+01:00","permalink":"https://jscheytt.github.io/p/the-universe-is-very-big/","title":"The Universe is Very Big"},{"content":"kubectl api-resources --verbs=list --namespaced -o name \\ | xargs -n 1 kubectl get --show-kind --ignore-not-found -n \u0026#34;$NAMESPACE\u0026#34; Props to RedHat.\n","date":"2021-10-29T12:11:47+02:00","permalink":"https://jscheytt.github.io/p/kubernetes-is-still-willing-to-show-you-dangling-resources-in-your-terminating-namespace/","title":"Kubernetes is still willing to show you Dangling Resources in your Terminating Namespace"},{"content":"UUIDs are 128-bit numbers. That means they have $2^{128}$ possible values which is roughly $3 \\cdot 10^{38}$ (or in scientific notation, 3e38).\nDoes this range make it safe for cryptographic purposes? Most people on the internet say an emphatic \u0026ldquo;No!\u0026rdquo;, so I am just keeping this here as a üö® disclaimer.\nBut is it at least collision-safe? I think definitely yes. And is it also guess-safe? Let\u0026rsquo;s explore that question with a bit of maths:\nExample Scenario Let\u0026rsquo;s say you have an API and you know the records are referenced by their UUID. And let\u0026rsquo;s say you wanted to guess any valid record (because üí∞ money).\nWhat is a realistic scenario, i.e. a reasonably expectable time it would take you to find a valid record? Let\u0026rsquo;s just naively assume you find a valid UUID after randomly iterating over half of all possible UUIDs.\nHow long would that take you? Imagine you had started firing requests at your hypothetical API at the beginning of the observable universe, i.e. about 1.3772e10 years (or 4.3437e17 seconds) ago. And you send requests at a rate of 1 trillion (1e12) requests per second (and, of course, your target API responds at the same rate üòâ). (You would have to be very physically close to the API server - at a trillionth of a second, light and therefore information travels only a measly 0.3 millimeters \u0026hellip;)\nHow many UUIDs would you have covered? You would have processed barely 1 billionth of all possible UUIDs (to be precise: 1e12 * 4,3437e17 / 2^128 ‚âà 1.2765e-9). That is not even remotely close to half of all UUIDs. To cover half of all possible UUIDs you would have to continue for another \u0026hellip; how many years?\n$$ \\frac{(1.2765 \\cdot 10^{9} - 1) \\cdot 4.3437 \\cdot 10^{17} \\ seconds}{2} = 2.7725 \\cdot 10^{26} \\ seconds = 8.786 \\cdot 10^{18} \\ years $$\nAnd these roughly 10 quintillion years are roughly 1 billion times the age of the universe. So you would very probably never live to see the matching of the UUID.\nBut, just hypothetically assuming you have started your client\u0026rsquo;s requests at the dawn of time and can continue to run it on this Earth unattended for as long as this planet exists: Would you still physically have enough time to execute your requests (for half of all UUIDs)?\nWe are going into lots of speculation now, but:\nIn latest 2e9 years, all life will have vanished from Earth, the oceans have evaporated, the surface temperature will reach around 150 ¬∞ C. You better build your client and API servers very temperature robust üèú \u0026hellip; In 1e14 years, all stars will have exhausted their fuel. Assuming the Earth has not been completely engulfed by the Sun during its red giant phase, and assuming the Earth was not already ejected from its orbit into outer space (not another galaxy), then the Earth would surely collide with the then black dwarf Sun in 10e20 years. So yes, with a bit of preparation (temperature hardening, robust solar panels, radiation shielding) your client server would probably finish just in time before the Earth itself becomes mere history üòâ.\n","date":"2021-10-06T08:32:23+02:00","permalink":"https://jscheytt.github.io/p/guessing-uuids-would-actually-take-very-long/","title":"Guessing UUIDs would actually take very long"},{"content":"This year I have switched from an Android smartphone (Samsung Galaxy J3 (2016)) to an iPhone (SE 2020).\nWhen switching, these things stood out to me:\nThere is no really usable calendar app. I was using Business Calendar before and I still miss the month widget. I have settled with Google Calendar for now. The swipe gestures from all possible sides of the screen instead of the 1-dimensional top drawer menu are really interesting, and I have grown very fond of them. The emergency contact feature is well thought out. Migrating WhatsApp chats is only possible via paid 3rd party apps. I paid 30 USD for Dr. Fone, connecting both devices to a Desktop/Laptop computer, and it worked flawlessly (missing only the read/unread markers). The mobile internet usage from the stock system is higher than on Android and I have no way reducing it. It used up 17 out of my precious 100 MB monthly quota for system \u0026ldquo;software updates\u0026rdquo; although I deactivated that on the App Store. Privacy is probably a lot better than on Android. See this article. Makes sense as Apple is a hardware company and Google is a data company. I have a lot more space on my phone now and I don\u0026rsquo;t have to worry about deleting apps for space. Many of the default apps and settings work really well for me - just I expected also from the MacOS experience. But I deactivated all Office-ish apps I am extremely disappointed and shocked that there is no solution (not even a paid one) to activate Do Not Disturb (DND) during calendar events. I used a small Android app called Polite before and there is no equivalent for it, not even by a long shot! Automatic dark/light mode depending on daytime is very nice. And some iPhone SE-specific things I appreciate:\nFingerprint/TouchID was a very good choice. It\u0026rsquo;s kind of sad though that you can add only up to 3 fingerprints (just like on MacOS). The size is a great relief as it\u0026rsquo;s smaller than most gigantic smartphones from basically all brands nowadays. The camera is really good even though it\u0026rsquo;s just one lens. ","date":"2021-09-25T17:13:18+02:00","permalink":"https://jscheytt.github.io/p/transitioning-from-android-to-ios-the-good-the-bad-and-the-ugly/","title":"Transitioning from Android to iOS ‚Äî The Good, the Bad, and the Ugly"},{"content":"As a DevOps Engineer one key skill is automating repetitive tasks. What most people grab for intuitively is writing Shell scripts (be it Bash, zsh, fish or whichever flavor you prefer). And there are a lot many good reasons to do so:\nIt is closest to typing commands directly in the terminal. You don\u0026rsquo;t have to learn a dedicated programming language. It is very portable to other platforms like e.g. a CI server. But once you start managing an increasing number of tasks with your scripts, you start to face another problem: How do you manage your scripts?\nPersonally, I have always loved being able to enter some new place where conventions were already in place. It takes away so much work and mental effort at the beginning, and you can just get to work quickly. (That might explain why I fell in love with ‚ù§Ô∏è Ruby on Rails before I dug into üíé Ruby.)\nShell scripts by their very nature do not pose any restrictions regarding e.g. naming patterns or directory structures. Honestly, I think there never will be, and that is ok. But what I have come to appreciate a lot recently is Make as a companion for my Shell scripts.\nüèó Make vs. üêö Shell in a ü•ú Nutshell Purpose: Make is good at creating files, Shell is good at executing scripts. Portability: If your system has Bash, chances are pretty high that Make is also available. Developer API: Make has a clear entrypoint (namely make), Shell can be everything you want it to be. Make is a tool that has its origin in the world of compiled languages, especially C. Compiling source code into binary artifacts (and doing so üèé economically) is what Make was originally designed for. I mean, the name of a tool should make its use clear, but let me just state this again for my future self: Make is meant to üèó make (create) files.\nIt\u0026rsquo;s all about target files. That\u0026rsquo;s why it makes sense to approach a Makefile with a mindset of \u0026ldquo;What do I want to create/build?\u0026rdquo; instead of \u0026ldquo;What do I want to perform?\u0026rdquo; To me this sounds very reminiscent of the distinction between declarative and imperative programming.\nSafely Versioned Secrets Management My concrete entrypoint into Make was the following use case I had lately, and it hopefully helps to illustrate the point of target files:\n‚ò∏Ô∏è You have 2 AWS accounts with 1 Kubernetes cluster each. (One is for running a dev and a staging environment, the other one is running the production environment.) üîë Secrets are stored in AWS Secrets Manager and synced into the cluster via ExternalSecrets. ‚õîÔ∏è You are not allowed to store secrets in Git, not even in encrypted form. ü™£ The secrets are JSON files and the key names are important, so you want to store them in Git. What I did as a first step was to create sample secrets files that contained the keys but no valid data (kind of the schema of the secrets):\nsecrets ‚îú‚îÄ‚îÄ dev # One directory per target environment ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ staging ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ prod ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ config1.sample.json # One sample file per secret ‚îú‚îÄ‚îÄ service2.sample.json ‚îî‚îÄ‚îÄ service3.sample.json I put the keys I needed into the sample files and as a value a description of what to put in (or e.g. from which Password Service to fetch the value from). The file service2.sample.json would e.g. look like this.\n{ \u0026#34;EXTERNAL_API_KEY\u0026#34;: \u0026#34;API Key of EXTERNAL_SERVICE\u0026#34;, \u0026#34;CLOUD_SERVICE_CLIENT_SECRET\u0026#34;: \u0026#34;client secret for accessing CLOUD_SERVICE\u0026#34;, \u0026#34;CLOUD_SERVICE_PASSWORD\u0026#34;: \u0026#34;password for accessing CLOUD_SERVICE\u0026#34;, \u0026#34;BASIC_AUTH_PASSWORD\u0026#34;: \u0026#34;password for sending via Basic Auth\u0026#34; } The target structure I wanted to achieve was this:\nsecrets ‚îú‚îÄ‚îÄ dev ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json # This file contains the *keys* of ‚îÇ ‚îÇ # secrets/config1.sample.json ‚îÇ ‚îÇ # and the actual secret *values*! ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ staging ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json # Contains key of sample file and ‚îÇ ‚îÇ # values for staging environment. ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ prod ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ config1.sample.json ‚îú‚îÄ‚îÄ service2.sample.json ‚îî‚îÄ‚îÄ service3.sample.json In order to not commit any actual secrets into version control, I added the following entries to my .gitignore:\n# Ignore secret data ... secrets/**/*.json # ... but keep the samples !secrets/*.sample.json Copying the Samples Now how do you copy the files to all environment\u0026rsquo;s directories? And how do you make sure you copy them exactly once (so you don\u0026rsquo;t lose the secrets you already entered)?\nYou could create a script with the following logic:\n# For each environment directory: ## For each sample file: ### Extract the service name ### Check if target secret file already exists ### If not, copy sample to target file But now, üèó Make to the rescue:\n### Variables # Fetch all sample files. secrets_samples := $(wildcard secrets/*.sample.json) # Construct the paths for all dev secrets destinations. dev_secrets := $(patsubst secrets/%.sample.json,secrets/dev/%.json,$(secrets_samples)) # Construct the paths for all staging secrets destinations. staging_secrets := $(patsubst secrets/dev/%,secrets/staging/%,$(dev_secrets)) # Construct the paths for all staging secrets destinations. prod_secrets := $(patsubst secrets/dev/%,secrets/prod/%,$(dev_secrets)) # Gather the paths of all secrets\u0026#39; destinations. all_secrets := $(dev_secrets) $(staging_secrets) $(prod_secrets) ### Rules # üéØ Purpose: \u0026#34;Copy all samples to their destinations.\u0026#34; # ü§ì What Make sees: \u0026#34;When you build the file secrets.copy-templates, # make sure that all files in $(all_secrets) have been built first.\u0026#34; # üë©‚Äçüè´ Explanation: A rule can be empty, and a rule can have prerequisites # on the first line. I like to think of such a rule as a kind of shortcut. secrets.copy-templates: $(all_secrets) # üéØ Purpose: \u0026#34;Ensure that Make still runs the job \u0026#39;secrets.copy-templates\u0026#39; # even if a file called \u0026#39;secrets.copy-templates\u0026#39; is created.\u0026#34; # ü§ì What Make sees: \u0026#34;I am supposed to always build secrets.copy-templates # even if that file already exists.\u0026#34; .PHONY: secrets.copy-templates # üéØ Purpose: \u0026#34;Copy the file on the right to the file on the left.\u0026#34; # ü§ì What Make sees: \u0026#34;When a file matching the pattern secrets/dev/(.*).json # is built, execute this rule. # Also first make sure that the corresponding file secrets/$1.sample.json # has been built before. # And the rule is: Copy the source file on the right ($\u0026lt;) to the destination # file on the left ($@).\u0026#34; # üë©‚Äçüè´ Explanation: These 3 rules are applied when you call secrets.copy-templates # because it requires $(all_secrets) to be built. secrets/dev/%.json: secrets/%.sample.json cp $\u0026lt; $@ secrets/staging/%.json: secrets/%.sample.json cp $\u0026lt; $@ secrets/prod/%.json: secrets/%.sample.json cp $\u0026lt; $@ If you now execute make secrets.copy-templates, the sample files will be copied to all environment directories. And if you run that same command again, üôä Make will not copy anything because it intelligenty detected that the source files have not changed since the last execution.\nThe code above is certainly not optimal - I bet you could abstract away the environment names with bit of metaprogramming, but let\u0026rsquo;s not optimize prematurely. I think the result is already impressive, especially if you consider the following:\n‚òùÔ∏è You don\u0026rsquo;t even have to call the job explicitly to run it. As long as secrets.copy-templates is the first build defined in the Makefile, you can even execute just make without any parameters. üë®‚Äçüíª Onboarding a new colleague to your repository now sounds a lot more like: \u0026ldquo;Yes, do read the README, but above all execute make.\u0026rdquo; ‚õë This is especially true if your Makefile contains good help texts for every rule. How Not To Shoot Yourself in the Foot Make was made primarily for building binaries from source code. The fact that we are able to use it in the way described above comes with a warning: If you do the following, you will lose the secret data you already entered into the secret files:\nExecute make secrets.copy-templates. Edit a sample file. Execute make secrets.copy-templates. üí• Make will copy and overwrite the edited sample file to all environment secret files. Why? Make compares timestamps, and when the source has a newer last-modified timestamp than the destination it will execute the rule\nCan we circumvent this? We sure can. You can either make sure that you edit each environment file after editing the sample file. Or you change the last-modified timestamp via a build in the Makefile üòâ:\nsecrets.ensure-copy-once: for f in $(all_secrets); do [ -f $$f ] \u0026amp;\u0026amp; touch $$f; done Now whenever you edit a sample file after the initial secrets.copy-templates you run this build via make secrets.ensure-copy-once and üõ° your secrets will not be deleted.\nExtension: Environment-specific Sample Files One implicit assumption in my structure was that the secrets in service2 will always have the same schema in every environment. One day it so happened that service2 needed to have additional keys on prod, but they should not be present on dev or staging.\nI adjusted my desired structure like this:\nsecrets ‚îú‚îÄ‚îÄ dev ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json # Contains keys from service2.sample.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ staging ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json # Contains keys from service2.sample.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ prod ‚îÇ¬†‚îú‚îÄ‚îÄ config1.json ‚îÇ¬†‚îú‚îÄ‚îÄ service2.json # Contains keys from service2.sample.prod.json ‚îÇ¬†‚îú‚îÄ‚îÄ service3.json ‚îÇ¬†‚îî‚îÄ‚îÄ .keep ‚îú‚îÄ‚îÄ config1.sample.json ‚îú‚îÄ‚îÄ service2.sample.json # Default sample file ‚îú‚îÄ‚îÄ service2.sample.prod.json # Prod-specific sample file ‚îî‚îÄ‚îÄ service3.sample.json And I wrote my first Makefile function:\n# A Make function can take in an arbitrary number of numbered parameters. define copy_template cp $(1) $(2) @# Check if there is a more environment-specific sample file $(eval ENVIRONMENT := $(shell echo $(2) | sed -E \u0026#39;s#secrets/(.*)/.*#\\1#\u0026#39;)) $(eval ENVIRONMENT_SAMPLE_FILE := $(patsubst %.sample.json,%.sample.$(ENVIRONMENT).json,$(1))) @# If environment-specific file exists, copy it to destination if [ -f \u0026#34;$(ENVIRONMENT_SAMPLE_FILE)\u0026#34; ]; then cp $(ENVIRONMENT_SAMPLE_FILE) $(2); fi endef # Calling a Make function works by executing \u0026#39;call\u0026#39; # with the function name and all its parameters as a list. # My previous rules now became this: secrets/dev/%.json: secrets/%.sample.json $(call copy_template,$\u0026lt;,$@) secrets/staging/%.json: secrets/%.sample.json $(call copy_template,$\u0026lt;,$@) secrets/prod/%.json: secrets/%.sample.json $(call copy_template,$\u0026lt;,$@) üç£ Perfect Symphony: Calling Scripts From Make It\u0026rsquo;s all good and nice to have your secrets created, but how do you deploy them to AWS Secrets Manager? Of course you write a thin wrapper around the wonderfully verbose AWS CLI:\n#!/usr/bin/env bash set -euo pipefail # set -x # DEBUG secret_name=\u0026#34;$1\u0026#34; # Use second argument or read stdin secret_value=\u0026#34;${2:-$(cat -)}\u0026#34; echo \u0026#34;$secret_value\u0026#34; # DEBUG # Create secret in idempotent way, avoid script from failing set +e aws secretsmanager create-secret --name \u0026#34;$secret_name\u0026#34; \u0026amp;\u0026gt; /dev/null set -e # Put secret value and output response to stdout aws secretsmanager put-secret-value --secret-id \u0026#34;$secret_name\u0026#34; \\ --secret-string \u0026#34;$secret_value\u0026#34; | cat In your terminal you would call it e.g. like this:\n./helpers/deploy-secret.sh envs/dev/config1-secrets \u0026lt; secrets/dev/config1.json\nLet\u0026rsquo;s make a generic rule in Make to execute this script:\n# The dependency on $(all_secrets) is to make sure that the secrets files exist # before deploying them. secret.deploy: $(all_secrets) ./helpers/deploy-secret.sh $(name) \u0026lt; secrets/$(environment)/$(filename) The call to the script that you executed above would become this:\nmake secret.deploy name=envs/dev/config1-secrets environment=dev filename=config1\nAs we have multiple services, let\u0026rsquo;s add one rule per service:\n# The secret values in this one are the same across all environments secret.deploy.config1: $(MAKE) secret.deploy name=envs/config1-secrets filename=config1.json # service2 has different secret values on the different environments secret.deploy.service2: $(MAKE) secret.deploy name=envs/$(environment)/service2-secrets filename=service2.json # service 3 also has environment-specific secret values secret.deploy.service3: $(MAKE) secret.deploy name=envs/$(environment)/service3-secrets filename=service3.json Now we can tie these together into one rule for a whole environment:\n# Deploy all secrets for one environment secrets.deploy.all: $(MAKE) secret.deploy.config1 $(MAKE) secret.deploy.service2 $(MAKE) secret.deploy.service3 # Deploy all secrets for the dev cluster secrets.deploy.dev: $(MAKE) secrets.deploy.all environment=dev $(MAKE) secrets.deploy.all environment=staging # Deploy all secrets for the prod cluster secrets.deploy.prod: $(MAKE) secrets.deploy.all environment=prod ‚úÖ Once you are authenticated to the corresponding AWS account, you can deploy your secrets with either make secrets.deploy.dev or make secrets.deploy.prod.\nSummarizing Make gives you a consistent and clean Developer API. Make is almost universally installed everywhere. Don\u0026rsquo;t decide between either Make or Shell - use both together. Refactor more complex logic into separate Shell scripts (like isolated functions) which are called from within Make. You can check out the entire Makefile (including the secrets structure and scripts) in this Git repo.\nCredits I am indebted to the following parties in making my start into the world of Make a lot smoother than I expected:\nIsaac Z. Schlueter for his interactive Gist The guys at Upbound for creating Crossplane where they use Make in their providers and even distribute common functionality as a Git submodule ","date":"2021-09-06T13:38:15+02:00","permalink":"https://jscheytt.github.io/p/the-story-of-my-first-makefile-half-versioned-secrets-management/","title":"The Story of My First Makefile ‚Äî Half-Versioned Secrets Management"},{"content":"HTML allows you to specify a starting number from which an ordered list (\u0026lt;ol\u0026gt;) should start. I thought \u0026ldquo;Is there an upper bound?\u0026rdquo;.\nTurns out: Yes, there is. It\u0026rsquo;s 2147483647 (i.e. 231-1 ). Looks like a signed 32-bit integer to me.\n\u0026lt;ol start=2147483645\u0026gt; \u0026lt;li\u0026gt;I am still in order\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;As am I\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Me too\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;üí• Limit reached\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;üí• Limit reached\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;üí• Limit reached\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; The above snippet will render as the following:\nI am still in order As am I Me too üí• Limit reached üí• Limit reached üí• Limit reached ","date":"2021-09-02T08:55:22+02:00","permalink":"https://jscheytt.github.io/p/html-limits-you-to-a-signed-32-bit-int-in-ordered-lists/","title":"HTML limits you to a signed 32-bit int in ordered lists"},{"content":"All you need is the secret of your TOTP.\nThe QR code is just a representation of a oath:// URL That URL contains the secret as a query parameter.\n# Install oathtool brew install oathtool # Use your secret, e.g. as a base32-encoded string oathtool --totp --base32 \u0026#34;MFRGCZDTMVRXEZLUBI======\u0026#34; ","date":"2021-08-27T08:20:41+02:00","permalink":"https://jscheytt.github.io/p/you-can-create-totp-tokens-via-cli-without-a-smartphone/","title":"You can create TOTP tokens via CLI without a smartphone"},{"content":"I really love Docker, and I also come to like security more and more. One advice I have been hearing a lot (e.g. in this Container Security Cheat Sheet from Snyk) is that you should not run your container as a root user.\n\u0026ldquo;Easy thing,\u0026rdquo; I thought to myself, \u0026ldquo;I am just going to put something like USER {app}\u0026rdquo; at the top of my Dockerfile.\u0026quot; Well, think again, because:\nFROM node:lts USER node # I would have thought that after this point, every action will happen in the name of this user # and also that every created directory and file will belong to this user ... üòï But: # ‚ö†Ô∏è This directory is created by root:root! WORKDIR /app # ‚ö†Ô∏è These files will be copied over to be owned by root:root! COPY package*.json ./ # üí• This step fails in some (not all!) environments with errors like \u0026#34;Not enough permissions on /app\u0026#34; RUN npm install \u0026amp;\u0026amp; \\ npm run verify # ‚ö†Ô∏è If you manage to get to this point, these files, too, will be copied over to be owned by root:root! COPY . . ENTRYPOINT [\u0026#34;npm\u0026#34;] I ended up fixing it by creating the directory and then chown-ing it. Equally I executed the COPY instructions with the --chown flag. In the end I refactored it a bit using some ENVs, too:\nFROM node:lts # Ensure that target WORKDIR exists and is owned by target (non-root) user ENV USERNAME=node ENV USERID=$USERNAME:$USERNAME ENV TARGETDIR=/app RUN mkdir -p $TARGETDIR \u0026amp;\u0026amp; chown -R $USERID $TARGETDIR WORKDIR $TARGETDIR USER $USERNAME COPY --chown=$USERID package*.json ./ RUN npm install \u0026amp;\u0026amp; \\ npm run verify COPY --chown=$USERID . . ENTRYPOINT [\u0026#34;npm\u0026#34;] ","date":"2021-07-23T14:42:07+02:00","permalink":"https://jscheytt.github.io/p/docker-does-not-really-help-you-a-lot-trying-to-get-permissions-right/","title":"Docker does not really help you a lot trying to get permissions right"},{"content":"I have developed quite some muscle memory in terminating vim via :wqa. Now I can save one more character by retraining myself to use :xa! üòÑ\nI also like how :x sort of symbolizes the close button ‚ùå of many window managers and their default behavior of saving when you close a file.\nFor more documentation open vim and type :h :x.\nWait, now that you mention it \u0026hellip; Well, turns out the documentation mentions an even easier way: Just press ZZ (without the colon) üò¥\nNow if only I could combine this to perform :wqa \u0026hellip;\nHappy vim-ing! üëã\n","date":"2021-07-16T00:00:00Z","permalink":"https://jscheytt.github.io/p/you-can-wq-in-vim-with-x/","title":"You can :wq in vim with :x"}]